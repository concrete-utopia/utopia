#canvas-root-wrapper {
  width: 100%;
  flex: 1;
}

#canvas-root {
  position: relative;
  overflow: hidden;
  height: 100%;
}

.canvas-text.canvas-text-editable,
.canvas-text.canvas-text-editable * {
  user-select: text;
  -webkit-user-select: text !important;
  cursor: text;
}

/* #canvas-controls.focused::before  {
  content: ' ';
  left: 0px;
  right: 0px;
  top: 0px;
  bottom: 0px;
  z-index: 99999;
  position: absolute;
  border: 1px solid #0F91E6;
} */

.scene {
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.2);
  /* please leave this in */
}

svg {
  overflow: visible;
}

/* the dot: basic, highlighted, selected */

.physics-snap-point {
  fill: rgba(0, 214, 114, 0.8);
  stroke: #fff;
  position: relative;
  -webkit-filter: drop-shadow(0px 1px 3px rgba(0, 0, 0, 0.1));
  filter: drop-shadow(0px 1px 3px rgba(0, 0, 0, 0.1));
}

.physics-snap-point:hover {
  fill: rgba(0, 214, 114, 0.9);
}

.physics-snap-point-selected {
  fill: rgba(0, 214, 114, 1);
}

.physics-snap-point-highlighted {
  fill: rgba(0, 214, 114, 0.8);
  stroke: #fff;
}

.physics-component-highlight {
  fill: rgba(255, 255, 255, 1);
  stroke: rgba(255, 56, 93, 1);
  /* the blur syntax does not work for us, I have no idea why */
  /* https://webkit.org/demos/backdrop-filter/ */
  -webkit-svg-shadow: 0px 1px 2px rgba(83, 83, 83, 0.5);
}

.physics #control-highlight-outline {
  stroke: rgba(255, 56, 93, 1);
  -webkit-svg-shadow: 0px 1px 2px rgba(83, 83, 83, 0.5);
}

.physics-stroke-1 {
  stroke: #00d572;
}

.physics-stroke-2 {
  stroke: #00d572;
}

.physics-stroke-3 {
  stroke: #00d572;
}
.physics-stroke-4 {
  stroke: #00d572;
}

.physics-stroke-5 {
  stroke: #00d572;
}

.physics-stroke-6 {
  stroke: #00d572;
}

.physics-stroke-7 {
  stroke: #a65628;
}

.physics-stroke-8 {
  stroke: #f781bf;
}

.physics-fill-1 {
  fill: #e41a1c;
}

.physics-fill-2 {
  fill: #377eb8;
}

.physics-fill-3 {
  fill: #4daf4a;
}
.physics-fill-4 {
  fill: #984ea3;
}

.physics-fill-5 {
  fill: #ff7f00;
}

.physics-fill-6 {
  fill: #ffff33;
}

.physics-fill-7 {
  fill: #a65628;
}

.physics-fill-8 {
  fill: #f781bf;
}

/* affected area */

.physics-component-affected-area {
  stroke: rgba(255, 56, 93, 0.5);
  fill: rgba(255, 255, 255, 0.5);
  stroke-width: 1px;
}

.physics-component-affected-area-highlight {
  stroke: rgba(255, 56, 93, 0.7);
  fill: rgba(255, 255, 255, 0.7);
}

.physics-component-affected-area-select {
  stroke: rgba(255, 56, 93, 1);
  fill: rgba(255, 255, 255, 0.9);
}

.physics-snap-anchor {
  fill: rgba(255, 255, 255, 1);
}

.physics-snap-anchor-selected {
  fill: rgba(255, 255, 255, 0.9);
}

.physics-snap-anchor-highlighted {
  stroke: rgba(56, 255, 93, 1);
  fill: rgba(255, 255, 255, 0.9);
}

.physics-spring-end {
  fill: rgba(255, 255, 255, 1);
}

.physics-spring-end-selected {
  fill: rgba(255, 255, 255, 0.9);
}

.physics-spring-end-highlighted {
  stroke: rgba(56, 255, 93, 1);
  fill: rgba(255, 255, 255, 0.9);
}

.physics-torsion-spring {
  fill: rgba(255, 255, 255, 1);
}

.physics-torsion-spring-selected {
  fill: rgba(255, 255, 255, 0.9);
}

.physics-torsion-spring-highlighted {
  stroke: rgba(56, 255, 93, 1);
  fill: rgba(255, 255, 255, 0.9);
}

/* this is the control outline for ALL selection */
.highlight-outline {
  fill: none;
  stroke: var(--emphasis-color-luminous);
}

.highlight-outline-link {
  fill: none;
  stroke: #574be2;
}

.select-outline {
  stroke: var(--emphasis-color-luminous);
}

.line {
  fill: none;
  stroke: rgba(88, 88, 96, 1);
}

/* references are references created by expressions, not linked views */
.reference-outline {
  fill: rgba(83, 83, 83, 0.2);
  stroke-width: 2px;
  stroke: rgba(255, 56, 93, 1);
  pointer-events: none;
}
#control-reference-outline-0 {
  fill: rgba(255, 156, 53, 0.3);
  stroke: rgba(255, 156, 53, 1);
  stroke-width: 2px;
}

#control-reference-outline-1 {
  fill: rgba(255, 56, 93, 0.3);
  stroke: rgba(255, 56, 93, 1);
  stroke-width: 2px;
}

#control-select-outline-path {
  fill: none;
}

.invisible-line {
  fill: none;
  stroke: rgba(0, 0, 0, 0);
}

.template-outline {
  fill: rgba(135, 76, 242, 0.2);
  stroke: rgba(135, 76, 242, 1);
  pointer-events: none;
}

.template-connector {
  fill: rgba(255, 255, 255, 1);
  stroke: rgba(135, 76, 242, 1);
}

.anchor-fill,
#control-end,
#control-start,
#control-radius,
#control-end-line,
#control-start-line,
.rect-anchor,
.circle-anchor {
  fill: rgba(255, 255, 255, 1);
  stroke: var(--emphasis-color-luminous);
}

.anchor-transparent {
  fill: transparent;
}

.frame-not-updateable {
  stroke: var(--color-red1);
}

.anchor-not-updateable {
  fill: rgba(255, 255, 255, 1);
  stroke: var(--color-red1);
}

.ruler-dimension-indicator-line {
  stroke: var(--ruler-dimension-indicator);
}

.ruler-dimension-indicator-label {
  fill: var(--ruler-dimension-indicator);
}

#control-insert-outline,
#control-insert-outline-mirror {
  fill: var(--emphasis-color-60pct);
  stroke: var(--emphasis-color);
}

.inequality-line-absolute {
  stroke: var(--emphasis-color-outline);
}

.inequality-line-relative {
  stroke: var(--emphasis-color-outline);
}

.inequality-line-transparent {
  stroke: transparent;
}

.inequality-arrow-absolute {
  stroke: var(--emphasis-color-outline);
  fill: var(--emphasis-color-outline);
}

.inequality-arrow-relative {
  stroke: var(--emphasis-color-outline);
  fill: var(--emphasis-color-outline);
}

.inequality-arrow-transparent {
  stroke: transparent;
  fill: transparent;
}

.or-constraint-line-absolute {
  stroke: var(--emphasis-color-outline);
}

.or-constraint-line-relative {
  stroke: var(--emphasis-color-outline);
}

.or-constraint-line-transparent {
  stroke: transparent;
}

.or-constraint-arrow-absolute {
  stroke: var(--emphasis-color-outline);
  fill: var(--emphasis-color-outline);
}

.or-constraint-arrow-relative {
  stroke: var(--emphasis-color-outline);
  fill: var(--emphasis-color-outline);
}

.or-constraint-arrow-transparent {
  stroke: transparent;
  fill: transparent;
}

.custom-component-error {
  position: absolute;
  border-color: rgba(255, 0, 0, 1);
  border-width: 2;
  border-style: solid;
}

.custom-component-error::after {
  content: 'Error';
}

.canvas-ruler {
  fill: rgb(252, 252, 252);
}

.canvas-ruler-border {
  stroke: var(--heavygrid-color);
}

.parent-frame-clipping {
  fill: none;
  stroke: var(--canvascontrol-cropmarks);
}

.parent-frame-non-clipping {
  fill: none;
  stroke: green;
}

.parent-frame-edge {
  fill: none;
  stroke: var(--canvascontrol-cropmarks);
  stroke-linecap: square;
}

.parent-frame-label {
  fill: var(--canvascontrol-cropmarks);
}

#control-insert-outline,
#control-insert-outline-mirror {
  fill: var(--emphasis-color-60pct);
  stroke: var(--emphasis-color);
}

#control-insert-outline-transparent {
  fill: none;
  stroke: var(--emphasis-color);
}

#control-insert-dimensions {
  color: var(--emphasis-color);
}
