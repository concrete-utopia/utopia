// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Babel transpile can transpile jsx fragment 1`] = `
Object {
  "type": "RIGHT",
  "value": Object {
    "code": "var App = props => {
  return React.createElement(React.Fragment, null, React.createElement(View, {
    style: { ...props.style,
      backgroundColor: '#FFFFFF'
    },
    layout: {
      layoutSystem: 'pinSystem'
    },
    \\"data-uid\\": \\"aaa\\"
  }));
};",
    "sourceMap": Object {
      "file": "test.js",
      "mappings": "AAcEA,IAAAA,GAAAA,GAAAA,KAAAA,IAAAA;AACDA,SACcC,0CACJD,oBAAAA,IAAAA;AACJA,IAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,CAAAA,KAAAA;AAAAA,MAAAA,eAAAA,EAAAA;AAAAA,KADIA;AAECA,IAAAA,MAAAA,EAAAA;AAAAA,MAAAA,YAAAA,EAAAA;AAAAA,KAFDA;AAGFE,gBAAaC;AAHXH,IADIC,CADdD;AASKI,CAVJJ",
      "names": Array [
        "
",
        " ",
        "style",
        "props",
        "/",
      ],
      "sources": Array [
        "/utopia/storyboard.js",
      ],
      "sourcesContent": Array [
        "
import * as React from 'react'
import { View, jsx } from 'utopia-api'

export var canvasMetadata = {
  scenes: [
    {
      component: 'App',
      frame: { height: 812, left: 0, width: 375, top: 0 },
      props: { layout: { top: 0, left: 0, bottom: 0, right: 0 } },
      container: { layoutSystem: 'pinSystem' },
    },
  ],
  elementMetadata: {},
}

export var App = (props) => {
  return (
    <>
      <View
        style={{ ...props.style, backgroundColor: '#FFFFFF' }}
        layout={{ layoutSystem: 'pinSystem' }}
        data-uid='aaa'
      ></View>
    </>
  )
}
",
      ],
      "version": 3,
    },
  },
}
`;

exports[`JSX parser parses back and forth as a function, with an arbitrary piece of JavaScript 1`] = `
Object {
  "combinedTopLevelArbitraryBlock": Object {
    "definedElsewhere": Array [
      "utopiaCanvasJSXLookup",
    ],
    "definedWithin": Array [
      "cakeFn",
      "otherFn",
    ],
    "elementsWithin": Object {},
    "javascript": "function cakeFn(n) {
  return n
}
function otherFn(n) {
  return n
}",
    "params": Array [],
    "sourceMap": Object {
      "file": "code.tsx",
      "mappings": "AAYCA,SAASC,MAATD,CAAgBE,CAAhBF,EAAmBG;AACjBC,SAAOF,CAAPE;AACDC;;AACDL,SAASM,OAATN,CAAiBE,CAAjBF,EAAoBG;AAClBC,SAAOF,CAAPE;AACFG",
      "names": Array [
        "function",
        "cakeFn",
        "n",
        "{",
        "return",
        "
",
        "otherFn",
        "}",
      ],
      "sources": Array [
        "code.tsx",
      ],
      "sourcesContent": Array [
        "import { cake } from 'cake'
import * as React from 'react'
import {
  UtopiaUtils,
  Ellipse,
  Image,
  Rectangle,
  Storyboard,
  Text,
  View,
  Scene,
} from 'utopia-api'
function cakeFn(n) {
  return n
}
function otherFn(n) {
  return n
}
export var whatever = (props) => {
  return (
    <View data-uid='aaa'>
      <cake
        data-uid='aab'
        left={cakeFn(otherFn('b') + 2)}
      />
    </View>
  )
}
",
      ],
      "version": 3,
    },
    "transpiledJavascript": "function cakeFn(n) {
  return n;
}

function otherFn(n) {
  return n;
}
return { cakeFn: cakeFn, otherFn: otherFn };",
    "type": "ARBITRARY_JS_BLOCK",
    "uid": "",
  },
  "exportsDetail": Array [
    Object {
      "functionName": "whatever",
      "type": "EXPORT_FUNCTION",
    },
  ],
  "fullHighlightBounds": Object {
    "0b3": Object {
      "endCol": 38,
      "endLine": 23,
      "startCol": 14,
      "startLine": 23,
      "uid": "0b3",
    },
    "6e3": Object {
      "endCol": 24,
      "endLine": 20,
      "startCol": 19,
      "startLine": 20,
      "uid": "6e3",
    },
    "aaa": Object {
      "endCol": 11,
      "endLine": 25,
      "startCol": 4,
      "startLine": 20,
      "uid": "aaa",
    },
    "aab": Object {
      "endCol": 8,
      "endLine": 24,
      "startCol": 6,
      "startLine": 21,
      "uid": "aab",
    },
    "b63": Object {
      "endCol": 1,
      "endLine": 17,
      "startCol": 0,
      "startLine": 15,
      "uid": "b63",
    },
    "bcc": Object {
      "endCol": 1,
      "endLine": 14,
      "startCol": 0,
      "startLine": 12,
      "uid": "bcc",
    },
    "f8d": Object {
      "endCol": 3,
      "endLine": 26,
      "startCol": 2,
      "startLine": 19,
      "uid": "f8d",
    },
    "feb": Object {
      "endCol": 22,
      "endLine": 22,
      "startCol": 17,
      "startLine": 22,
      "uid": "feb",
    },
  },
  "highlightBounds": Object {
    "aaa": Object {
      "endCol": 11,
      "endLine": 25,
      "startCol": 4,
      "startLine": 20,
      "uid": "aaa",
    },
    "aab": Object {
      "endCol": 8,
      "endLine": 24,
      "startCol": 6,
      "startLine": 21,
      "uid": "aab",
    },
  },
  "imports": Object {
    "cake": Object {
      "importedAs": null,
      "importedFromWithin": Array [
        Object {
          "alias": "cake",
          "name": "cake",
        },
      ],
      "importedWithName": null,
    },
    "react": Object {
      "importedAs": "React",
      "importedFromWithin": Array [],
      "importedWithName": null,
    },
    "utopia-api": Object {
      "importedAs": null,
      "importedFromWithin": Array [
        Object {
          "alias": "UtopiaUtils",
          "name": "UtopiaUtils",
        },
        Object {
          "alias": "Ellipse",
          "name": "Ellipse",
        },
        Object {
          "alias": "Image",
          "name": "Image",
        },
        Object {
          "alias": "Rectangle",
          "name": "Rectangle",
        },
        Object {
          "alias": "Storyboard",
          "name": "Storyboard",
        },
        Object {
          "alias": "Text",
          "name": "Text",
        },
        Object {
          "alias": "View",
          "name": "View",
        },
        Object {
          "alias": "Scene",
          "name": "Scene",
        },
      ],
      "importedWithName": null,
    },
  },
  "jsxFactoryFunction": null,
  "topLevelElements": Array [
    Object {
      "importStarAs": false,
      "importWithName": false,
      "imports": Array [
        "cake",
      ],
      "module": "cake",
      "rawCode": "import { cake } from 'cake'",
      "type": "IMPORT_STATEMENT",
    },
    Object {
      "rawCode": "
",
      "type": "UNPARSED_CODE",
    },
    Object {
      "importStarAs": true,
      "importWithName": false,
      "imports": Array [],
      "module": "react",
      "rawCode": "import * as React from 'react'",
      "type": "IMPORT_STATEMENT",
    },
    Object {
      "rawCode": "
",
      "type": "UNPARSED_CODE",
    },
    Object {
      "importStarAs": false,
      "importWithName": false,
      "imports": Array [
        "UtopiaUtils",
        "Ellipse",
        "Image",
        "Rectangle",
        "Storyboard",
        "Text",
        "View",
        "Scene",
      ],
      "module": "utopia-api",
      "rawCode": "import {
  UtopiaUtils,
  Ellipse,
  Image,
  Rectangle,
  Storyboard,
  Text,
  View,
  Scene,
} from 'utopia-api'",
      "type": "IMPORT_STATEMENT",
    },
    Object {
      "rawCode": "
",
      "type": "UNPARSED_CODE",
    },
    Object {
      "definedElsewhere": Array [
        "utopiaCanvasJSXLookup",
      ],
      "definedWithin": Array [
        "cakeFn",
      ],
      "elementsWithin": Object {},
      "javascript": "function cakeFn(n) {
  return n
}",
      "params": Array [],
      "sourceMap": Object {
        "file": "code.tsx",
        "mappings": "AAYCA,SAASC,MAATD,CAAgBE,CAAhBF,EAAmBG;AACjBC,SAAOF,CAAPE;AACFC",
        "names": Array [
          "function",
          "cakeFn",
          "n",
          "{",
          "return",
          "}",
        ],
        "sources": Array [
          "code.tsx",
        ],
        "sourcesContent": Array [
          "import { cake } from 'cake'
import * as React from 'react'
import {
  UtopiaUtils,
  Ellipse,
  Image,
  Rectangle,
  Storyboard,
  Text,
  View,
  Scene,
} from 'utopia-api'
function cakeFn(n) {
  return n
}
function otherFn(n) {
  return n
}
export var whatever = (props) => {
  return (
    <View data-uid='aaa'>
      <cake
        data-uid='aab'
        left={cakeFn(otherFn('b') + 2)}
      />
    </View>
  )
}
",
        ],
        "version": 3,
      },
      "transpiledJavascript": "function cakeFn(n) {
  return n;
}
return { cakeFn: cakeFn };",
      "type": "ARBITRARY_JS_BLOCK",
      "uid": "",
    },
    Object {
      "rawCode": "
",
      "type": "UNPARSED_CODE",
    },
    Object {
      "definedElsewhere": Array [
        "utopiaCanvasJSXLookup",
      ],
      "definedWithin": Array [
        "otherFn",
      ],
      "elementsWithin": Object {},
      "javascript": "function otherFn(n) {
  return n
}",
      "params": Array [],
      "sourceMap": Object {
        "file": "code.tsx",
        "mappings": "AAeCA,SAASC,OAATD,CAAiBE,CAAjBF,EAAoBG;AAClBC,SAAOF,CAAPE;AACFC",
        "names": Array [
          "function",
          "otherFn",
          "n",
          "{",
          "return",
          "}",
        ],
        "sources": Array [
          "code.tsx",
        ],
        "sourcesContent": Array [
          "import { cake } from 'cake'
import * as React from 'react'
import {
  UtopiaUtils,
  Ellipse,
  Image,
  Rectangle,
  Storyboard,
  Text,
  View,
  Scene,
} from 'utopia-api'
function cakeFn(n) {
  return n
}
function otherFn(n) {
  return n
}
export var whatever = (props) => {
  return (
    <View data-uid='aaa'>
      <cake
        data-uid='aab'
        left={cakeFn(otherFn('b') + 2)}
      />
    </View>
  )
}
",
        ],
        "version": 3,
      },
      "transpiledJavascript": "function otherFn(n) {
  return n;
}
return { otherFn: otherFn };",
      "type": "ARBITRARY_JS_BLOCK",
      "uid": "",
    },
    Object {
      "rawCode": "
",
      "type": "UNPARSED_CODE",
    },
    Object {
      "arbitraryJSBlock": null,
      "blockOrExpression": "block",
      "declarationSyntax": "var",
      "isFunction": true,
      "name": "whatever",
      "param": Object {
        "boundParam": Object {
          "defaultExpression": null,
          "paramName": "props",
          "type": "REGULAR_PARAM",
        },
        "dotDotDotToken": false,
        "type": "PARAM",
      },
      "propsUsed": Array [],
      "returnStatementComments": Object {
        "leadingComments": Array [],
        "trailingComments": Array [],
      },
      "rootElement": Object {
        "children": Array [
          Object {
            "children": Array [],
            "name": Object {
              "baseVariable": "cake",
              "propertyPath": Object {
                "propertyElements": Array [],
              },
            },
            "props": Array [
              Object {
                "comments": Object {
                  "leadingComments": Array [],
                  "trailingComments": Array [],
                },
                "key": "data-uid",
                "type": "JSX_ATTRIBUTES_ENTRY",
                "value": Object {
                  "comments": Object {
                    "leadingComments": Array [],
                    "trailingComments": Array [],
                  },
                  "type": "ATTRIBUTE_VALUE",
                  "uid": "",
                  "value": "aab",
                },
              },
              Object {
                "comments": Object {
                  "leadingComments": Array [],
                  "trailingComments": Array [],
                },
                "key": "left",
                "type": "JSX_ATTRIBUTES_ENTRY",
                "value": Object {
                  "comments": Object {
                    "leadingComments": Array [],
                    "trailingComments": Array [],
                  },
                  "definedElsewhere": Array [
                    "cakeFn",
                    "otherFn",
                  ],
                  "elementsWithin": Object {},
                  "javascript": "cakeFn(otherFn('b') + 2)",
                  "originalJavascript": "cakeFn(otherFn('b') + 2)",
                  "params": Array [],
                  "sourceMap": Object {
                    "file": "code.tsx",
                    "mappings": "OAuBeA,MAAOC,QAAQC,CAACC,GAADD,CAARD,GAAgBG,CAAhBH,CAAPD",
                    "names": Array [
                      "cakeFn",
                      "otherFn",
                      "'",
                      "b",
                      ")",
                    ],
                    "sources": Array [
                      "code.tsx",
                    ],
                    "sourcesContent": Array [
                      "import { cake } from 'cake'
import * as React from 'react'
import {
  UtopiaUtils,
  Ellipse,
  Image,
  Rectangle,
  Storyboard,
  Text,
  View,
  Scene,
} from 'utopia-api'
function cakeFn(n) {
  return n
}
function otherFn(n) {
  return n
}
export var whatever = (props) => {
  return (
    <View data-uid='aaa'>
      <cake
        data-uid='aab'
        left={cakeFn(otherFn('b') + 2)}
      />
    </View>
  )
}
",
                    ],
                    "version": 3,
                  },
                  "transpiledJavascript": "return cakeFn(otherFn('b') + 2);",
                  "type": "ATTRIBUTE_OTHER_JAVASCRIPT",
                  "uid": "",
                },
              },
            ],
            "type": "JSX_ELEMENT",
            "uid": "",
          },
        ],
        "name": Object {
          "baseVariable": "View",
          "propertyPath": Object {
            "propertyElements": Array [],
          },
        },
        "props": Array [
          Object {
            "comments": Object {
              "leadingComments": Array [],
              "trailingComments": Array [],
            },
            "key": "data-uid",
            "type": "JSX_ATTRIBUTES_ENTRY",
            "value": Object {
              "comments": Object {
                "leadingComments": Array [],
                "trailingComments": Array [],
              },
              "type": "ATTRIBUTE_VALUE",
              "uid": "",
              "value": "aaa",
            },
          },
        ],
        "type": "JSX_ELEMENT",
        "uid": "",
      },
      "type": "UTOPIA_JSX_COMPONENT",
      "usedInReactDOMRender": false,
    },
    Object {
      "rawCode": "
",
      "type": "UNPARSED_CODE",
    },
  ],
  "type": "PARSE_SUCCESS",
}
`;

exports[`JSX parser parses fine with a circular dependency. 1`] = `
Object {
  "combinedTopLevelArbitraryBlock": null,
  "exportsDetail": Array [
    Object {
      "functionName": "whatever",
      "type": "EXPORT_FUNCTION",
    },
  ],
  "fullHighlightBounds": Object {
    "169": Object {
      "endCol": 45,
      "endLine": 6,
      "startCol": 40,
      "startLine": 6,
      "uid": "169",
    },
    "1e3": Object {
      "endCol": 37,
      "endLine": 6,
      "startCol": 25,
      "startLine": 6,
      "uid": "1e3",
    },
    "327": Object {
      "endCol": 22,
      "endLine": 6,
      "startCol": 17,
      "startLine": 6,
      "uid": "327",
    },
    "343": Object {
      "endCol": 45,
      "endLine": 4,
      "startCol": 40,
      "startLine": 4,
      "uid": "343",
    },
    "34a": Object {
      "endCol": 31,
      "endLine": 6,
      "startCol": 30,
      "startLine": 6,
      "uid": "34a",
    },
    "4cf": Object {
      "endCol": 37,
      "endLine": 4,
      "startCol": 25,
      "startLine": 4,
      "uid": "4cf",
    },
    "67f": Object {
      "endCol": 45,
      "endLine": 4,
      "startCol": 17,
      "startLine": 4,
      "uid": "67f",
    },
    "6b5": Object {
      "endCol": 22,
      "endLine": 4,
      "startCol": 17,
      "startLine": 4,
      "uid": "6b5",
    },
    "6c7": Object {
      "endCol": 45,
      "endLine": 6,
      "startCol": 17,
      "startLine": 6,
      "uid": "6c7",
    },
    "6e3": Object {
      "endCol": 53,
      "endLine": 5,
      "startCol": 48,
      "startLine": 5,
      "uid": "6e3",
    },
    "aaa": Object {
      "endCol": 56,
      "endLine": 5,
      "startCol": 33,
      "startLine": 5,
      "uid": "aaa",
    },
    "b93": Object {
      "endCol": 37,
      "endLine": 6,
      "startCol": 25,
      "startLine": 6,
      "uid": "b93",
    },
    "fa9": Object {
      "endCol": 37,
      "endLine": 4,
      "startCol": 25,
      "startLine": 4,
      "uid": "fa9",
    },
    "fbe": Object {
      "endCol": 31,
      "endLine": 4,
      "startCol": 30,
      "startLine": 4,
      "uid": "fbe",
    },
  },
  "highlightBounds": Object {
    "169": Object {
      "endCol": 45,
      "endLine": 6,
      "startCol": 40,
      "startLine": 6,
      "uid": "169",
    },
    "327": Object {
      "endCol": 22,
      "endLine": 6,
      "startCol": 17,
      "startLine": 6,
      "uid": "327",
    },
    "343": Object {
      "endCol": 45,
      "endLine": 4,
      "startCol": 40,
      "startLine": 4,
      "uid": "343",
    },
    "4cf": Object {
      "endCol": 37,
      "endLine": 4,
      "startCol": 25,
      "startLine": 4,
      "uid": "4cf",
    },
    "67f": Object {
      "endCol": 45,
      "endLine": 4,
      "startCol": 17,
      "startLine": 4,
      "uid": "67f",
    },
    "6b5": Object {
      "endCol": 22,
      "endLine": 4,
      "startCol": 17,
      "startLine": 4,
      "uid": "6b5",
    },
    "6c7": Object {
      "endCol": 45,
      "endLine": 6,
      "startCol": 17,
      "startLine": 6,
      "uid": "6c7",
    },
    "aaa": Object {
      "endCol": 56,
      "endLine": 5,
      "startCol": 33,
      "startLine": 5,
      "uid": "aaa",
    },
    "b93": Object {
      "endCol": 37,
      "endLine": 6,
      "startCol": 25,
      "startLine": 6,
      "uid": "b93",
    },
  },
  "imports": Object {
    "react": Object {
      "importedAs": "React",
      "importedFromWithin": Array [],
      "importedWithName": null,
    },
    "utopia-api": Object {
      "importedAs": null,
      "importedFromWithin": Array [
        Object {
          "alias": "View",
          "name": "View",
        },
      ],
      "importedWithName": null,
    },
  },
  "jsxFactoryFunction": null,
  "topLevelElements": Array [
    Object {
      "importStarAs": true,
      "importWithName": false,
      "imports": Array [],
      "module": "react",
      "rawCode": "import * as React from \\"react\\";",
      "type": "IMPORT_STATEMENT",
    },
    Object {
      "rawCode": "
",
      "type": "UNPARSED_CODE",
    },
    Object {
      "importStarAs": false,
      "importWithName": false,
      "imports": Array [
        "View",
      ],
      "module": "utopia-api",
      "rawCode": "import {
  View
} from \\"utopia-api\\";",
      "type": "IMPORT_STATEMENT",
    },
    Object {
      "rawCode": "
",
      "type": "UNPARSED_CODE",
    },
    Object {
      "arbitraryJSBlock": null,
      "blockOrExpression": "expression",
      "declarationSyntax": "const",
      "isFunction": true,
      "name": "a",
      "param": Object {
        "boundParam": Object {
          "defaultExpression": null,
          "paramName": "n",
          "type": "REGULAR_PARAM",
        },
        "dotDotDotToken": false,
        "type": "PARAM",
      },
      "propsUsed": Array [],
      "returnStatementComments": Object {
        "leadingComments": Array [],
        "trailingComments": Array [],
      },
      "rootElement": Object {
        "comments": Object {
          "leadingComments": Array [],
          "questionTokenComments": Object {
            "leadingComments": Array [],
            "trailingComments": Array [],
          },
          "trailingComments": Array [],
        },
        "condition": Object {
          "comments": Object {
            "leadingComments": Array [],
            "questionTokenComments": undefined,
            "trailingComments": Array [],
          },
          "definedElsewhere": Array [
            "n",
          ],
          "elementsWithin": Object {},
          "javascript": "n > 0",
          "originalJavascript": "n > 0",
          "params": Array [],
          "sourceMap": Object {
            "file": "code.tsx",
            "mappings": "OAImBA,CAACC,GAAEC,CAAJC",
            "names": Array [
              " ",
              ">",
              "0",
              "n",
            ],
            "sources": Array [
              "code.tsx",
            ],
            "sourcesContent": Array [
              "import * as React from \\"react\\";
import {
  View
} from \\"utopia-api\\";
const a = (n) => n > 0 ? <div>n</div> : b(10)
export var whatever = (props) => <View data-uid='aaa' />
const b = (n) => n > 0 ? <div>n</div> : a(10)
",
            ],
            "version": 3,
          },
          "transpiledJavascript": "return n > 0;",
          "type": "ATTRIBUTE_OTHER_JAVASCRIPT",
          "uid": "",
        },
        "originalConditionString": "n > 0",
        "type": "JSX_CONDITIONAL_EXPRESSION",
        "uid": "",
        "whenFalse": Object {
          "comments": Object {
            "leadingComments": Array [],
            "trailingComments": Array [],
          },
          "definedElsewhere": Array [
            "b",
          ],
          "elementsWithin": Object {},
          "javascript": "b(10)",
          "originalJavascript": "b(10)",
          "params": Array [],
          "sourceMap": Object {
            "file": "code.tsx",
            "mappings": "OAI0CA,CAACC,IAAFC",
            "names": Array [
              "(",
              "10",
              "b",
            ],
            "sources": Array [
              "code.tsx",
            ],
            "sourcesContent": Array [
              "import * as React from \\"react\\";
import {
  View
} from \\"utopia-api\\";
const a = (n) => n > 0 ? <div>n</div> : b(10)
export var whatever = (props) => <View data-uid='aaa' />
const b = (n) => n > 0 ? <div>n</div> : a(10)
",
            ],
            "version": 3,
          },
          "transpiledJavascript": "return b(10);",
          "type": "ATTRIBUTE_OTHER_JAVASCRIPT",
          "uid": "",
        },
        "whenTrue": Object {
          "children": Array [
            Object {
              "text": "n",
              "type": "JSX_TEXT_BLOCK",
              "uid": "",
            },
          ],
          "name": Object {
            "baseVariable": "div",
            "propertyPath": Object {
              "propertyElements": Array [],
            },
          },
          "props": Array [
            Object {
              "comments": Object {
                "leadingComments": Array [],
                "trailingComments": Array [],
              },
              "key": "data-uid",
              "type": "JSX_ATTRIBUTES_ENTRY",
              "value": Object {
                "comments": Object {
                  "leadingComments": Array [],
                  "trailingComments": Array [],
                },
                "type": "ATTRIBUTE_VALUE",
                "uid": "",
                "value": "4cf",
              },
            },
          ],
          "type": "JSX_ELEMENT",
          "uid": "",
        },
      },
      "type": "UTOPIA_JSX_COMPONENT",
      "usedInReactDOMRender": false,
    },
    Object {
      "rawCode": "
",
      "type": "UNPARSED_CODE",
    },
    Object {
      "arbitraryJSBlock": null,
      "blockOrExpression": "expression",
      "declarationSyntax": "var",
      "isFunction": true,
      "name": "whatever",
      "param": Object {
        "boundParam": Object {
          "defaultExpression": null,
          "paramName": "props",
          "type": "REGULAR_PARAM",
        },
        "dotDotDotToken": false,
        "type": "PARAM",
      },
      "propsUsed": Array [],
      "returnStatementComments": Object {
        "leadingComments": Array [],
        "trailingComments": Array [],
      },
      "rootElement": Object {
        "children": Array [],
        "name": Object {
          "baseVariable": "View",
          "propertyPath": Object {
            "propertyElements": Array [],
          },
        },
        "props": Array [
          Object {
            "comments": Object {
              "leadingComments": Array [],
              "trailingComments": Array [],
            },
            "key": "data-uid",
            "type": "JSX_ATTRIBUTES_ENTRY",
            "value": Object {
              "comments": Object {
                "leadingComments": Array [],
                "trailingComments": Array [],
              },
              "type": "ATTRIBUTE_VALUE",
              "uid": "",
              "value": "aaa",
            },
          },
        ],
        "type": "JSX_ELEMENT",
        "uid": "",
      },
      "type": "UTOPIA_JSX_COMPONENT",
      "usedInReactDOMRender": false,
    },
    Object {
      "rawCode": "
",
      "type": "UNPARSED_CODE",
    },
    Object {
      "arbitraryJSBlock": null,
      "blockOrExpression": "expression",
      "declarationSyntax": "const",
      "isFunction": true,
      "name": "b",
      "param": Object {
        "boundParam": Object {
          "defaultExpression": null,
          "paramName": "n",
          "type": "REGULAR_PARAM",
        },
        "dotDotDotToken": false,
        "type": "PARAM",
      },
      "propsUsed": Array [],
      "returnStatementComments": Object {
        "leadingComments": Array [],
        "trailingComments": Array [],
      },
      "rootElement": Object {
        "comments": Object {
          "leadingComments": Array [],
          "questionTokenComments": Object {
            "leadingComments": Array [],
            "trailingComments": Array [],
          },
          "trailingComments": Array [],
        },
        "condition": Object {
          "comments": Object {
            "leadingComments": Array [],
            "questionTokenComments": undefined,
            "trailingComments": Array [],
          },
          "definedElsewhere": Array [
            "n",
          ],
          "elementsWithin": Object {},
          "javascript": "n > 0",
          "originalJavascript": "n > 0",
          "params": Array [],
          "sourceMap": Object {
            "file": "code.tsx",
            "mappings": "OAMmBA,CAACC,GAAEC,CAAJC",
            "names": Array [
              " ",
              ">",
              "0",
              "n",
            ],
            "sources": Array [
              "code.tsx",
            ],
            "sourcesContent": Array [
              "import * as React from \\"react\\";
import {
  View
} from \\"utopia-api\\";
const a = (n) => n > 0 ? <div>n</div> : b(10)
export var whatever = (props) => <View data-uid='aaa' />
const b = (n) => n > 0 ? <div>n</div> : a(10)
",
            ],
            "version": 3,
          },
          "transpiledJavascript": "return n > 0;",
          "type": "ATTRIBUTE_OTHER_JAVASCRIPT",
          "uid": "",
        },
        "originalConditionString": "n > 0",
        "type": "JSX_CONDITIONAL_EXPRESSION",
        "uid": "",
        "whenFalse": Object {
          "comments": Object {
            "leadingComments": Array [],
            "trailingComments": Array [],
          },
          "definedElsewhere": Array [
            "a",
          ],
          "elementsWithin": Object {},
          "javascript": "a(10)",
          "originalJavascript": "a(10)",
          "params": Array [],
          "sourceMap": Object {
            "file": "code.tsx",
            "mappings": "OAM0CA,CAACC,IAAFC",
            "names": Array [
              "(",
              "10",
              "a",
            ],
            "sources": Array [
              "code.tsx",
            ],
            "sourcesContent": Array [
              "import * as React from \\"react\\";
import {
  View
} from \\"utopia-api\\";
const a = (n) => n > 0 ? <div>n</div> : b(10)
export var whatever = (props) => <View data-uid='aaa' />
const b = (n) => n > 0 ? <div>n</div> : a(10)
",
            ],
            "version": 3,
          },
          "transpiledJavascript": "return a(10);",
          "type": "ATTRIBUTE_OTHER_JAVASCRIPT",
          "uid": "",
        },
        "whenTrue": Object {
          "children": Array [
            Object {
              "text": "n",
              "type": "JSX_TEXT_BLOCK",
              "uid": "",
            },
          ],
          "name": Object {
            "baseVariable": "div",
            "propertyPath": Object {
              "propertyElements": Array [],
            },
          },
          "props": Array [
            Object {
              "comments": Object {
                "leadingComments": Array [],
                "trailingComments": Array [],
              },
              "key": "data-uid",
              "type": "JSX_ATTRIBUTES_ENTRY",
              "value": Object {
                "comments": Object {
                  "leadingComments": Array [],
                  "trailingComments": Array [],
                },
                "type": "ATTRIBUTE_VALUE",
                "uid": "",
                "value": "b93",
              },
            },
          ],
          "type": "JSX_ELEMENT",
          "uid": "",
        },
      },
      "type": "UTOPIA_JSX_COMPONENT",
      "usedInReactDOMRender": false,
    },
    Object {
      "rawCode": "
",
      "type": "UNPARSED_CODE",
    },
  ],
  "type": "PARSE_SUCCESS",
}
`;

exports[`JSX parser parses the code when it has a JSX block with an object defined inside 1`] = `
Object {
  "combinedTopLevelArbitraryBlock": Object {
    "definedElsewhere": Array [
      "utopiaCanvasJSXLookup",
    ],
    "definedWithin": Array [
      "a",
    ],
    "elementsWithin": Object {},
    "javascript": "const a = \\"cake\\"",
    "params": Array [],
    "sourceMap": Object {
      "file": "code.tsx",
      "mappings": "AAWCA,MAAMC,CAACC,GAAGC,MAAVH",
      "names": Array [
        "const",
        "a",
        " ",
        "\\"",
      ],
      "sources": Array [
        "code.tsx",
      ],
      "sourcesContent": Array [
        "import * as React from \\"react\\";
import {
  UtopiaUtils,
  Ellipse,
  Image,
  Rectangle,
  Storyboard,
  Text,
  View,
  Scene
} from \\"utopia-api\\";
const a = \\"cake\\"
export var App = (props) => <View data-uid='bbb'>
  {{a: a}}
</View>
",
      ],
      "version": 3,
    },
    "transpiledJavascript": "const a = \\"cake\\";
return { a: a };",
    "type": "ARBITRARY_JS_BLOCK",
    "uid": "",
  },
  "exportsDetail": Array [
    Object {
      "functionName": "App",
      "type": "EXPORT_FUNCTION",
    },
  ],
  "fullHighlightBounds": Object {
    "23f": Object {
      "endCol": 9,
      "endLine": 13,
      "startCol": 3,
      "startLine": 13,
      "uid": "23f",
    },
    "854": Object {
      "endCol": 48,
      "endLine": 12,
      "startCol": 43,
      "startLine": 12,
      "uid": "854",
    },
    "86a": Object {
      "endCol": 16,
      "endLine": 11,
      "startCol": 0,
      "startLine": 11,
      "uid": "86a",
    },
    "bbb": Object {
      "endCol": 7,
      "endLine": 14,
      "startCol": 28,
      "startLine": 12,
      "uid": "bbb",
    },
  },
  "highlightBounds": Object {
    "23f": Object {
      "endCol": 9,
      "endLine": 13,
      "startCol": 3,
      "startLine": 13,
      "uid": "23f",
    },
    "bbb": Object {
      "endCol": 7,
      "endLine": 14,
      "startCol": 28,
      "startLine": 12,
      "uid": "bbb",
    },
  },
  "imports": Object {
    "react": Object {
      "importedAs": "React",
      "importedFromWithin": Array [],
      "importedWithName": null,
    },
    "utopia-api": Object {
      "importedAs": null,
      "importedFromWithin": Array [
        Object {
          "alias": "UtopiaUtils",
          "name": "UtopiaUtils",
        },
        Object {
          "alias": "Ellipse",
          "name": "Ellipse",
        },
        Object {
          "alias": "Image",
          "name": "Image",
        },
        Object {
          "alias": "Rectangle",
          "name": "Rectangle",
        },
        Object {
          "alias": "Storyboard",
          "name": "Storyboard",
        },
        Object {
          "alias": "Text",
          "name": "Text",
        },
        Object {
          "alias": "View",
          "name": "View",
        },
        Object {
          "alias": "Scene",
          "name": "Scene",
        },
      ],
      "importedWithName": null,
    },
  },
  "jsxFactoryFunction": null,
  "topLevelElements": Array [
    Object {
      "importStarAs": true,
      "importWithName": false,
      "imports": Array [],
      "module": "react",
      "rawCode": "import * as React from \\"react\\";",
      "type": "IMPORT_STATEMENT",
    },
    Object {
      "rawCode": "
",
      "type": "UNPARSED_CODE",
    },
    Object {
      "importStarAs": false,
      "importWithName": false,
      "imports": Array [
        "UtopiaUtils",
        "Ellipse",
        "Image",
        "Rectangle",
        "Storyboard",
        "Text",
        "View",
        "Scene",
      ],
      "module": "utopia-api",
      "rawCode": "import {
  UtopiaUtils,
  Ellipse,
  Image,
  Rectangle,
  Storyboard,
  Text,
  View,
  Scene
} from \\"utopia-api\\";",
      "type": "IMPORT_STATEMENT",
    },
    Object {
      "rawCode": "
",
      "type": "UNPARSED_CODE",
    },
    Object {
      "definedElsewhere": Array [
        "utopiaCanvasJSXLookup",
      ],
      "definedWithin": Array [
        "a",
      ],
      "elementsWithin": Object {},
      "javascript": "const a = \\"cake\\"",
      "params": Array [],
      "sourceMap": Object {
        "file": "code.tsx",
        "mappings": "AAWCA,MAAMC,CAACC,GAAGC,MAAVH",
        "names": Array [
          "const",
          "a",
          " ",
          "\\"",
        ],
        "sources": Array [
          "code.tsx",
        ],
        "sourcesContent": Array [
          "import * as React from \\"react\\";
import {
  UtopiaUtils,
  Ellipse,
  Image,
  Rectangle,
  Storyboard,
  Text,
  View,
  Scene
} from \\"utopia-api\\";
const a = \\"cake\\"
export var App = (props) => <View data-uid='bbb'>
  {{a: a}}
</View>
",
        ],
        "version": 3,
      },
      "transpiledJavascript": "const a = \\"cake\\";
return { a: a };",
      "type": "ARBITRARY_JS_BLOCK",
      "uid": "",
    },
    Object {
      "rawCode": "
",
      "type": "UNPARSED_CODE",
    },
    Object {
      "arbitraryJSBlock": null,
      "blockOrExpression": "expression",
      "declarationSyntax": "var",
      "isFunction": true,
      "name": "App",
      "param": Object {
        "boundParam": Object {
          "defaultExpression": null,
          "paramName": "props",
          "type": "REGULAR_PARAM",
        },
        "dotDotDotToken": false,
        "type": "PARAM",
      },
      "propsUsed": Array [],
      "returnStatementComments": Object {
        "leadingComments": Array [],
        "trailingComments": Array [],
      },
      "rootElement": Object {
        "children": Array [
          Object {
            "comments": Object {
              "leadingComments": Array [],
              "trailingComments": Array [],
            },
            "definedElsewhere": Array [
              "a",
            ],
            "elementsWithin": Object {},
            "javascript": "({ a: a });",
            "originalJavascript": "{a: a}",
            "params": Array [],
            "sourceMap": Object {
              "file": "code.tsx",
              "mappings": "OAAA,CAAC;AAAE,KAAH;AAAC,CAAD",
              "names": Array [],
              "sources": Array [
                "code.tsx",
              ],
              "sourcesContent": Array [
                "import * as React from \\"react\\";
import {
  UtopiaUtils,
  Ellipse,
  Image,
  Rectangle,
  Storyboard,
  Text,
  View,
  Scene
} from \\"utopia-api\\";
const a = \\"cake\\"
export var App = (props) => <View data-uid='bbb'>
  {{a: a}}
</View>
",
              ],
              "version": 3,
            },
            "transpiledJavascript": "return ({
  a: a
});",
            "type": "ATTRIBUTE_OTHER_JAVASCRIPT",
            "uid": "",
          },
        ],
        "name": Object {
          "baseVariable": "View",
          "propertyPath": Object {
            "propertyElements": Array [],
          },
        },
        "props": Array [
          Object {
            "comments": Object {
              "leadingComments": Array [],
              "trailingComments": Array [],
            },
            "key": "data-uid",
            "type": "JSX_ATTRIBUTES_ENTRY",
            "value": Object {
              "comments": Object {
                "leadingComments": Array [],
                "trailingComments": Array [],
              },
              "type": "ATTRIBUTE_VALUE",
              "uid": "",
              "value": "bbb",
            },
          },
        ],
        "type": "JSX_ELEMENT",
        "uid": "",
      },
      "type": "UTOPIA_JSX_COMPONENT",
      "usedInReactDOMRender": false,
    },
    Object {
      "rawCode": "
",
      "type": "UNPARSED_CODE",
    },
  ],
  "type": "PARSE_SUCCESS",
}
`;

exports[`lintAndParse returns a syntax error from eslint when something is broken 1`] = `
Object {
  "diagnostics": null,
  "errorMessage": null,
  "errorMessages": Array [
    Object {
      "codeSnippet": "  16 |       return (
  17 |         <View
> 18 |           style={{ backgroundColor: \\"darkgrey\\", position: \\"absolute\\" }, ...hello}
     |                                                                         ^
  19 |         >
  20 |         </View>
  21 |       )",
      "endColumn": undefined,
      "endLine": undefined,
      "errorCode": null,
      "fileName": "test.js",
      "message": "Parsing error: Unexpected token",
      "passTime": 12345678,
      "severity": "fatal",
      "source": "eslint",
      "startColumn": 73,
      "startLine": 18,
      "type": "fatal",
    },
  ],
  "parsedJSONFailure": null,
  "type": "PARSE_FAILURE",
}
`;
