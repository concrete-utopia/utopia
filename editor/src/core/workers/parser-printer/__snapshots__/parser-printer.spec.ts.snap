// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Babel transpile can transpile jsx fragment 1`] = `
Object {
  "type": "RIGHT",
  "value": Object {
    "code": "var App = function App(props) {
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(View, {
    style: { ...props.style,
      backgroundColor: '#FFFFFF'
    },
    layout: {
      layoutSystem: 'pinSystem'
    },
    \\"data-uid\\": 'aaa'
  }));
};",
    "sourceMap": Object {
      "file": "test.js",
      "mappings": "AAcEA,IAAAA,GAAAA,GAAAA,SAAAA,GAAAA,CAAAA,KAAAA,EAAAA;AACDA,sBACcC,uDACJD,oBAAAA,IAAAA;AACJA,IAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,CAAAA,KAAAA;AAAAA,MAAAA,eAAAA,EAAAA;AAAAA,KADIA;AAECA,IAAAA,MAAAA,EAAAA;AAAAA,MAAAA,YAAAA,EAAAA;AAAAA,KAFDA;AAGFE,gBAAaC;AAHXH,IADIC,CADdD;AASKI,CAVJJ",
      "names": Array [
        "
",
        " ",
        "style",
        "props",
        "/",
      ],
      "sources": Array [
        "/src/app.js",
      ],
      "sourcesContent": Array [
        "/** @jsx jsx */
import * as React from 'react'
import { View, jsx } from 'utopia-api'

export var canvasMetadata = {
  scenes: [
    {
      component: 'App',
      frame: { height: 812, left: 0, width: 375, top: 0 },
      props: { layout: { top: 0, left: 0, bottom: 0, right: 0 } },
      container: { layoutSystem: 'pinSystem' },
    },
  ],
  elementMetadata: {},
}

export var App = (props) => {
  return (
    <>
      <View
        style={{ ...props.style, backgroundColor: '#FFFFFF' }}
        layout={{ layoutSystem: 'pinSystem' }}
        data-uid={'aaa'}
      ></View>
    </>
  )
}
",
      ],
      "version": 3,
    },
  },
}
`;

exports[`JSX parser parses back and forth as a function, with an arbitrary piece of JavaScript 1`] = `
Object {
  "combinedTopLevelArbitraryBlock": Object {
    "definedElsewhere": Array [],
    "definedWithin": Array [
      "cakeFn",
      "otherFn",
    ],
    "javascript": "function cakeFn(n) {
  return n;
}
function otherFn(n) {
  return n;
}",
    "sourceMap": Object {
      "file": "code.tsx",
      "mappings": "AAGCA,SAASC,MAATD,CAAgBE,CAAhBF,EAAmBG;AACjBC,SAAOF,CAAPE;AACDC;;AACDL,SAASM,OAATN,CAAiBE,CAAjBF,EAAoBG;AAClBC,SAAOF,CAAPE;AACFG",
      "names": Array [
        "function",
        "cakeFn",
        "n",
        "{",
        "return",
        "
",
        "otherFn",
        "}",
      ],
      "sources": Array [
        "code.tsx",
      ],
      "sourcesContent": Array [
        "import { cake } from 'cake'
import * as React from 'react'
import { Ellipse, Image, Rectangle, Storyboard, Text, UtopiaUtils, View } from 'utopia-api'
function cakeFn(n) {
  return n
}
function otherFn(n) {
  return n
}
export var whatever = (props) => {
  return (
    <View data-uid={'aaa'}>
      <cake data-uid={'aab'} left={cakeFn(otherFn('b') + 2)} />
    </View>
  )
}
",
      ],
      "version": 3,
    },
    "transpiledJavascript": "function cakeFn(n) {
  return n;
}

function otherFn(n) {
  return n;
}
return { cakeFn: cakeFn, otherFn: otherFn };",
    "type": "ARBITRARY_JS_BLOCK",
    "uniqueID": "",
  },
  "highlightBounds": Object {
    "aaa": Object {
      "endCol": 11,
      "endLine": 13,
      "startCol": 4,
      "startLine": 11,
      "uid": "aaa",
    },
    "aab": Object {
      "endCol": 63,
      "endLine": 12,
      "startCol": 6,
      "startLine": 12,
      "uid": "aab",
    },
  },
  "imports": Object {
    "cake": Object {
      "importedAs": null,
      "importedFromWithin": Array [
        Object {
          "alias": "cake",
          "name": "cake",
        },
      ],
      "importedWithName": null,
    },
    "react": Object {
      "importedAs": "React",
      "importedFromWithin": Array [],
      "importedWithName": null,
    },
    "utopia-api": Object {
      "importedAs": null,
      "importedFromWithin": Array [
        Object {
          "alias": "Ellipse",
          "name": "Ellipse",
        },
        Object {
          "alias": "Image",
          "name": "Image",
        },
        Object {
          "alias": "Rectangle",
          "name": "Rectangle",
        },
        Object {
          "alias": "Storyboard",
          "name": "Storyboard",
        },
        Object {
          "alias": "Text",
          "name": "Text",
        },
        Object {
          "alias": "UtopiaUtils",
          "name": "UtopiaUtils",
        },
        Object {
          "alias": "View",
          "name": "View",
        },
      ],
      "importedWithName": null,
    },
  },
  "jsxFactoryFunction": null,
  "topLevelElements": Array [
    Object {
      "definedElsewhere": Array [],
      "definedWithin": Array [
        "cakeFn",
        "otherFn",
      ],
      "javascript": "function cakeFn(n) {
  return n;
}
function otherFn(n) {
  return n;
}",
      "sourceMap": Object {
        "file": "code.tsx",
        "mappings": "AAGCA,SAASC,MAATD,CAAgBE,CAAhBF,EAAmBG;AACjBC,SAAOF,CAAPE;AACDC;;AACDL,SAASM,OAATN,CAAiBE,CAAjBF,EAAoBG;AAClBC,SAAOF,CAAPE;AACFG",
        "names": Array [
          "function",
          "cakeFn",
          "n",
          "{",
          "return",
          "
",
          "otherFn",
          "}",
        ],
        "sources": Array [
          "code.tsx",
        ],
        "sourcesContent": Array [
          "import { cake } from 'cake'
import * as React from 'react'
import { Ellipse, Image, Rectangle, Storyboard, Text, UtopiaUtils, View } from 'utopia-api'
function cakeFn(n) {
  return n
}
function otherFn(n) {
  return n
}
export var whatever = (props) => {
  return (
    <View data-uid={'aaa'}>
      <cake data-uid={'aab'} left={cakeFn(otherFn('b') + 2)} />
    </View>
  )
}
",
        ],
        "version": 3,
      },
      "transpiledJavascript": "function cakeFn(n) {
  return n;
}

function otherFn(n) {
  return n;
}
return { cakeFn: cakeFn, otherFn: otherFn };",
      "type": "ARBITRARY_JS_BLOCK",
      "uniqueID": "",
    },
    Object {
      "arbitraryJSBlock": null,
      "isFunction": true,
      "name": "whatever",
      "param": Object {
        "boundParam": Object {
          "defaultExpression": null,
          "paramName": "props",
          "type": "REGULAR_PARAM",
        },
        "dotDotDotToken": false,
        "type": "PARAM",
      },
      "propsUsed": Array [],
      "rootElement": Object {
        "children": Array [
          Object {
            "children": Array [],
            "name": Object {
              "baseVariable": "cake",
              "propertyPath": Object {
                "propertyElements": Array [],
              },
            },
            "props": Object {
              "data-uid": Object {
                "type": "ATTRIBUTE_VALUE",
                "value": "aab",
              },
              "left": Object {
                "definedElsewhere": Array [
                  "cakeFn",
                  "otherFn",
                ],
                "javascript": "cakeFn(otherFn('b') + 2)",
                "sourceMap": Object {
                  "file": "code.tsx",
                  "mappings": "OAYoCA,MAAOC,QAAQC,CAACC,GAADD,CAARD,GAAgBG,CAAhBH,CAAPD",
                  "names": Array [
                    "cakeFn",
                    "otherFn",
                    "'",
                    "b",
                    ")",
                  ],
                  "sources": Array [
                    "code.tsx",
                  ],
                  "sourcesContent": Array [
                    "import { cake } from 'cake'
import * as React from 'react'
import { Ellipse, Image, Rectangle, Storyboard, Text, UtopiaUtils, View } from 'utopia-api'
function cakeFn(n) {
  return n
}
function otherFn(n) {
  return n
}
export var whatever = (props) => {
  return (
    <View data-uid={'aaa'}>
      <cake data-uid={'aab'} left={cakeFn(otherFn('b') + 2)} />
    </View>
  )
}
",
                  ],
                  "version": 3,
                },
                "transpiledJavascript": "return cakeFn(otherFn('b') + 2);",
                "type": "ATTRIBUTE_OTHER_JAVASCRIPT",
                "uniqueID": "",
              },
            },
            "type": "JSX_ELEMENT",
          },
        ],
        "name": Object {
          "baseVariable": "View",
          "propertyPath": Object {
            "propertyElements": Array [],
          },
        },
        "props": Object {
          "data-uid": Object {
            "type": "ATTRIBUTE_VALUE",
            "value": "aaa",
          },
        },
        "type": "JSX_ELEMENT",
      },
      "type": "UTOPIA_JSX_COMPONENT",
    },
  ],
  "type": "PARSE_SUCCESS",
}
`;

exports[`JSX parser parses fine with a circular dependency. 1`] = `
Object {
  "combinedTopLevelArbitraryBlock": Object {
    "definedElsewhere": Array [],
    "definedWithin": Array [
      "a",
      "b",
    ],
    "javascript": "const a = n => n > 0 ? n : b(10);
const b = n => n > 0 ? n : a(10);",
    "sourceMap": Object {
      "file": "code.tsx",
      "mappings": "AAICA,IAAMC,CAACC,GAAGC,SAAJF,CAAIE,CAACC,CAADD;AAAAA,SAAOC,CAACF,GAAGG,CAAJD,GAAQA,CAARA,GAAYE,CAACH,CAACI,EAADJ,CAApBA;AAAAA,CAAVH;;AAEAA,IAAMM,CAACJ,GAAGC,SAAJG,CAAIH,CAACC,CAADD;AAAAA,SAAOC,CAACF,GAAGG,CAAJD,GAAQA,CAARA,GAAYH,CAACE,CAACI,EAADJ,CAApBA;AAAAA,CAAVH",
      "names": Array [
        "const",
        "a",
        " ",
        "(",
        "n",
        "0",
        "b",
        "10",
      ],
      "sources": Array [
        "code.tsx",
      ],
      "sourcesContent": Array [
        "import * as React from \\"react\\";
import {
  View
} from \\"utopia-api\\";
const a = (n) => n > 0 ? n : b(10)
export var whatever = (props) => <View data-uid={'aaa'} />
const b = (n) => n > 0 ? n : a(10)
",
      ],
      "version": 3,
    },
    "transpiledJavascript": "var a = function a(n) {
  return n > 0 ? n : b(10);
};

var b = function b(n) {
  return n > 0 ? n : a(10);
};
return { a: a, b: b };",
    "type": "ARBITRARY_JS_BLOCK",
    "uniqueID": "",
  },
  "highlightBounds": Object {
    "aaa": Object {
      "endCol": 58,
      "endLine": 5,
      "startCol": 33,
      "startLine": 5,
      "uid": "aaa",
    },
  },
  "imports": Object {
    "react": Object {
      "importedAs": "React",
      "importedFromWithin": Array [],
      "importedWithName": null,
    },
    "utopia-api": Object {
      "importedAs": null,
      "importedFromWithin": Array [
        Object {
          "alias": "View",
          "name": "View",
        },
      ],
      "importedWithName": null,
    },
  },
  "jsxFactoryFunction": null,
  "topLevelElements": Array [
    Object {
      "definedElsewhere": Array [
        "b",
      ],
      "definedWithin": Array [
        "a",
      ],
      "javascript": "const a = n => n > 0 ? n : b(10);",
      "sourceMap": Object {
        "file": "code.tsx",
        "mappings": "AAICA,IAAMC,CAACC,GAAGC,SAAJF,CAAIE,CAACC,CAADD;AAAAA,SAAOC,CAACF,GAAGG,CAAJD,GAAQA,CAARA,GAAYE,CAACH,CAACI,EAADJ,CAApBA;AAAAA,CAAVH",
        "names": Array [
          "const",
          "a",
          " ",
          "(",
          "n",
          "0",
          "b",
          "10",
        ],
        "sources": Array [
          "code.tsx",
        ],
        "sourcesContent": Array [
          "import * as React from \\"react\\";
import {
  View
} from \\"utopia-api\\";
const a = (n) => n > 0 ? n : b(10)
export var whatever = (props) => <View data-uid={'aaa'} />
const b = (n) => n > 0 ? n : a(10)
",
        ],
        "version": 3,
      },
      "transpiledJavascript": "var a = function a(n) {
  return n > 0 ? n : b(10);
};
return { a: a };",
      "type": "ARBITRARY_JS_BLOCK",
      "uniqueID": "",
    },
    Object {
      "arbitraryJSBlock": null,
      "isFunction": true,
      "name": "whatever",
      "param": Object {
        "boundParam": Object {
          "defaultExpression": null,
          "paramName": "props",
          "type": "REGULAR_PARAM",
        },
        "dotDotDotToken": false,
        "type": "PARAM",
      },
      "propsUsed": Array [],
      "rootElement": Object {
        "children": Array [],
        "name": Object {
          "baseVariable": "View",
          "propertyPath": Object {
            "propertyElements": Array [],
          },
        },
        "props": Object {
          "data-uid": Object {
            "type": "ATTRIBUTE_VALUE",
            "value": "aaa",
          },
        },
        "type": "JSX_ELEMENT",
      },
      "type": "UTOPIA_JSX_COMPONENT",
    },
    Object {
      "definedElsewhere": Array [
        "a",
      ],
      "definedWithin": Array [
        "b",
      ],
      "javascript": "const b = n => n > 0 ? n : a(10);",
      "sourceMap": Object {
        "file": "code.tsx",
        "mappings": "AAMCA,IAAMC,CAACC,GAAGC,SAAJF,CAAIE,CAACC,CAADD;AAAAA,SAAOC,CAACF,GAAGG,CAAJD,GAAQA,CAARA,GAAYE,CAACH,CAACI,EAADJ,CAApBA;AAAAA,CAAVH",
        "names": Array [
          "const",
          "b",
          " ",
          "(",
          "n",
          "0",
          "a",
          "10",
        ],
        "sources": Array [
          "code.tsx",
        ],
        "sourcesContent": Array [
          "import * as React from \\"react\\";
import {
  View
} from \\"utopia-api\\";
const a = (n) => n > 0 ? n : b(10)
export var whatever = (props) => <View data-uid={'aaa'} />
const b = (n) => n > 0 ? n : a(10)
",
        ],
        "version": 3,
      },
      "transpiledJavascript": "var b = function b(n) {
  return n > 0 ? n : a(10);
};
return { b: b };",
      "type": "ARBITRARY_JS_BLOCK",
      "uniqueID": "",
    },
  ],
  "type": "PARSE_SUCCESS",
}
`;

exports[`JSX parser parses the code when it has a JSX block with an object defined inside 1`] = `
Object {
  "combinedTopLevelArbitraryBlock": Object {
    "definedElsewhere": Array [],
    "definedWithin": Array [
      "a",
    ],
    "javascript": "const a = \\"cake\\";",
    "sourceMap": Object {
      "file": "code.tsx",
      "mappings": "AAUCA,IAAMC,CAACC,GAAGC,MAAVH",
      "names": Array [
        "const",
        "a",
        " ",
        "\\"",
      ],
      "sources": Array [
        "code.tsx",
      ],
      "sourcesContent": Array [
        "import * as React from \\"react\\";
import {
  Ellipse,
  Image,
  Rectangle,
  Storyboard,
  Text,
  UtopiaUtils,
  View
} from \\"utopia-api\\";
const a = \\"cake\\"
export var App = (props) => <View data-uid={'bbb'}>
  {{a: a}}
</View>
",
      ],
      "version": 3,
    },
    "transpiledJavascript": "var a = \\"cake\\";
return { a: a };",
    "type": "ARBITRARY_JS_BLOCK",
    "uniqueID": "",
  },
  "highlightBounds": Object {
    "bbb": Object {
      "endCol": 7,
      "endLine": 13,
      "startCol": 28,
      "startLine": 11,
      "uid": "bbb",
    },
  },
  "imports": Object {
    "react": Object {
      "importedAs": "React",
      "importedFromWithin": Array [],
      "importedWithName": null,
    },
    "utopia-api": Object {
      "importedAs": null,
      "importedFromWithin": Array [
        Object {
          "alias": "Ellipse",
          "name": "Ellipse",
        },
        Object {
          "alias": "Image",
          "name": "Image",
        },
        Object {
          "alias": "Rectangle",
          "name": "Rectangle",
        },
        Object {
          "alias": "Storyboard",
          "name": "Storyboard",
        },
        Object {
          "alias": "Text",
          "name": "Text",
        },
        Object {
          "alias": "UtopiaUtils",
          "name": "UtopiaUtils",
        },
        Object {
          "alias": "View",
          "name": "View",
        },
      ],
      "importedWithName": null,
    },
  },
  "jsxFactoryFunction": null,
  "topLevelElements": Array [
    Object {
      "definedElsewhere": Array [],
      "definedWithin": Array [
        "a",
      ],
      "javascript": "const a = \\"cake\\";",
      "sourceMap": Object {
        "file": "code.tsx",
        "mappings": "AAUCA,IAAMC,CAACC,GAAGC,MAAVH",
        "names": Array [
          "const",
          "a",
          " ",
          "\\"",
        ],
        "sources": Array [
          "code.tsx",
        ],
        "sourcesContent": Array [
          "import * as React from \\"react\\";
import {
  Ellipse,
  Image,
  Rectangle,
  Storyboard,
  Text,
  UtopiaUtils,
  View
} from \\"utopia-api\\";
const a = \\"cake\\"
export var App = (props) => <View data-uid={'bbb'}>
  {{a: a}}
</View>
",
        ],
        "version": 3,
      },
      "transpiledJavascript": "var a = \\"cake\\";
return { a: a };",
      "type": "ARBITRARY_JS_BLOCK",
      "uniqueID": "",
    },
    Object {
      "arbitraryJSBlock": null,
      "isFunction": true,
      "name": "App",
      "param": Object {
        "boundParam": Object {
          "defaultExpression": null,
          "paramName": "props",
          "type": "REGULAR_PARAM",
        },
        "dotDotDotToken": false,
        "type": "PARAM",
      },
      "propsUsed": Array [],
      "rootElement": Object {
        "children": Array [
          Object {
            "definedElsewhere": Array [],
            "elementsWithin": Object {},
            "javascript": "({ a: a });",
            "originalJavascript": "{a: a}",
            "sourceMap": Object {
              "file": "code.tsx",
              "mappings": "OAAA,CAAC;AAAE,KAAH;AAAC,CAAD",
              "names": Array [],
              "sources": Array [
                "code.tsx",
              ],
              "sourcesContent": Array [
                "import * as React from \\"react\\";
import {
  Ellipse,
  Image,
  Rectangle,
  Storyboard,
  Text,
  UtopiaUtils,
  View
} from \\"utopia-api\\";
const a = \\"cake\\"
export var App = (props) => <View data-uid={'bbb'}>
  {{a: a}}
</View>
",
              ],
              "version": 3,
            },
            "transpiledJavascript": "return ({
  a: a
});",
            "type": "JSX_ARBITRARY_BLOCK",
            "uniqueID": "",
          },
        ],
        "name": Object {
          "baseVariable": "View",
          "propertyPath": Object {
            "propertyElements": Array [],
          },
        },
        "props": Object {
          "data-uid": Object {
            "type": "ATTRIBUTE_VALUE",
            "value": "bbb",
          },
        },
        "type": "JSX_ELEMENT",
      },
      "type": "UTOPIA_JSX_COMPONENT",
    },
  ],
  "type": "PARSE_SUCCESS",
}
`;

exports[`getHighlightBounds gets some bounds 1`] = `
Array [
  Object {
    "endCol": 15,
    "endLine": 28,
    "startCol": 8,
    "startLine": 17,
  },
]
`;

exports[`lintAndParse returns a syntax error from eslint when something is broken 1`] = `
Object {
  "diagnostics": null,
  "errorMessage": null,
  "errorMessages": Array [
    Object {
      "codeSnippet": "  15 |       return (
  16 |         <View
> 17 |           style={{ backgroundColor: \\"darkgrey\\", position: \\"absolute\\" }, ...hello}
     |                                                                         ^
  18 |         >
  19 |         </View>
  20 |       )",
      "endColumn": undefined,
      "endLine": undefined,
      "errorCode": null,
      "fileName": "test.js",
      "message": "Parsing error: Unexpected token",
      "passTime": 12345678,
      "severity": "fatal",
      "source": "eslint",
      "startColumn": 73,
      "startLine": 17,
      "type": "fatal",
    },
  ],
  "parsedJSONFailure": null,
  "type": "PARSE_FAILURE",
}
`;
