{
   "files":{
      "/react-spring/index.d.ts":{
         "module":{
            "code":"// This is the file TypeScript will see when it looks inside the module without any sub-paths\n// This should just reexport the package.json's \"main\".\nexport * from './web'\n// Add this (and to all other entry points) if a default export is ever added\n// export { default } from './web'\n"
         }
      },
      "/react-spring/native.cjs.d.ts":{
         "module":{
            "code":"export * from './native'"
         }
      },
      "/react-spring/native.d.ts":{
         "module":{
            "code":"export * from './index'\n"
         }
      },
      "/react-spring/package.json":{
         "module":{
            "code":"{\n  \"name\": \"react-spring\",\n  \"version\": \"8.0.27\",\n  \"description\": \"A set of spring-physics based animation primitives\",\n  \"main\": \"web.cjs.js\",\n  \"module\": \"web.js\",\n  \"react-native\": \"native.js\",\n  \"private\": false,\n  \"sideEffects\": false,\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/drcmda/react-spring.git\"\n  },\n  \"keywords\": [\n    \"react\",\n    \"motion\",\n    \"animated\",\n    \"animation\",\n    \"spring\"\n  ],\n  \"author\": \"Paul Henschel\",\n  \"contributors\": [\n    \"Alec Larson (https://github.com/aleclarson)\"\n  ],\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/drcmda/react-spring/issues\"\n  },\n  \"homepage\": \"https://github.com/drcmda/react-spring#readme\",\n  \"peerDependencies\": {\n    \"react\": \">= 16.8.0\",\n    \"react-dom\": \">= 16.8.0\"\n  },\n  \"dependencies\": {\n    \"@babel/runtime\": \"^7.3.1\",\n    \"prop-types\": \"^15.5.8\"\n  },\n  \"collective\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/react-spring\"\n  }\n}\n"
         }
      },
      "/react-spring/renderprops-addons.cjs.d.ts":{
         "module":{
            "code":"export * from './renderprops-addons'"
         }
      },
      "/react-spring/renderprops-addons.d.ts":{
         "module":{
            "code":"import { Ref, PureComponent } from 'react'\nimport { SpringConfig } from './renderprops-universal'\n\ninterface ParallaxProps {\n  pages: number\n\n  config?: SpringConfig | ((key: string) => SpringConfig)\n\n  scrolling?: boolean\n\n  horizontal?: boolean\n\n  ref?: Ref<Parallax>\n}\n\nexport class Parallax extends PureComponent<ParallaxProps> {\n  scrollTo: (offset: number) => void\n}\n\ninterface ParallaxLayerProps {\n  factor?: number\n\n  offset?: number\n\n  speed?: number\n}\n\nexport class ParallaxLayer extends PureComponent<ParallaxLayerProps> {}\n"
         }
      },
      "/react-spring/renderprops-konva.cjs.d.ts":{
         "module":{
            "code":"export * from './renderprops-konva'"
         }
      },
      "/react-spring/renderprops-konva.d.ts":{
         "module":{
            "code":"import {\n  ForwardRefExoticComponent,\n  ComponentPropsWithRef,\n  ReactType,\n} from 'react'\nimport * as konva from 'react-konva'\nimport { animated } from './renderprops-universal'\nexport * from './renderprops-universal'\n\ntype KonvaComponents = Pick<\n  typeof konva,\n  {\n    [K in keyof typeof konva]: typeof konva[K] extends ReactType ? K : never\n  }[keyof typeof konva]\n>\n\ndeclare const augmentedAnimated: typeof animated &\n  {\n    [Tag in keyof KonvaComponents]: ForwardRefExoticComponent<\n      ComponentPropsWithRef<KonvaComponents[Tag]>\n    >\n  }\n\nexport { augmentedAnimated as animated }\n"
         }
      },
      "/react-spring/renderprops-universal.cjs.d.ts":{
         "module":{
            "code":"export * from './renderprops-universal'"
         }
      },
      "/react-spring/renderprops-universal.d.ts":{
         "module":{
            "code":"// This is where the bulk of the type definitions should go.\n// The other entry points (except for hooks) all just expose this but with some customization.\n\nimport {\n  Component,\n  PureComponent,\n  ReactNode,\n  ComponentClass,\n  ComponentType,\n  ReactType,\n  Ref,\n  ForwardRefExoticComponent,\n  ComponentPropsWithRef,\n} from 'react'\n\nexport type SpringEasingFunc = (t: number) => number\n\nexport interface SpringConfig {\n  mass?: number\n  tension?: number\n  friction?: number\n  velocity?: number\n  clamp?: boolean\n  precision?: number\n  delay?: number\n  duration?: number\n  easing?: SpringEasingFunc\n}\n\ntype SpringRendererFunc<DS extends object = {}> = (params: DS) => ReactNode\n\nexport interface SpringBaseProps {\n  /**\n   * Spring config, or for individual keys: fn(key => config)\n   * @default config.default\n   */\n  config?: SpringConfig | ((key: string) => SpringConfig)\n  /**\n   * Will skip rendering the component if true and write to the dom directly\n   * @default false\n   */\n  native?: boolean\n  /**\n   * When true it literally resets: from -> to\n   * @default false\n   */\n  reset?: boolean\n  /**\n   * Prevents animation if true\n   * @default false\n   */\n  immediate?: boolean | ((key: string) => boolean)\n  /**\n   * Animation start delay, optional\n   */\n  delay?: number\n  /**\n   * reverse the animation\n   */\n  reverse?: boolean\n  /**\n   * Callback when the animation starts to animate\n   */\n  onStart?(): void\n}\n\nexport interface SpringProps<DS extends object = {}> extends SpringBaseProps {\n  /**\n   * Base styles\n   * @default {}\n   */\n  from?: Partial<DS>\n  /**\n   * Animates to...\n   * @default {}\n   */\n  to?: DS\n  /**\n   * Callback when the animation comes to a still-stand\n   */\n  onRest?: (ds: DS) => void\n  /**\n   * Frame by frame callback, first argument passed is the animated value\n   */\n  onFrame?: (ds: DS) => void\n  /**\n   * Takes a function that receives interpolated styles\n   */\n  children?: SpringRendererFunc<DS>\n  /**\n   * Inject props\n   * @default undefined\n   */\n  inject?: any\n  /**\n   * Inject props after animation is ended\n   */\n  after?: Partial<DS>\n  /**\n   * Escape hatch to force the spring to render\n   */\n  force?: boolean\n}\n\nexport const config: {\n  /** default: { tension: 170, friction: 26 } */\n  default: SpringConfig\n  /** gentle: { tension: 120, friction: 14 } */\n  gentle: SpringConfig\n  /** wobbly: { tension: 180, friction: 12 } */\n  wobbly: SpringConfig\n  /** stiff: { tension: 210, friction: 20 } */\n  stiff: SpringConfig\n  /** slow: { tension: 280, friction: 60 } */\n  slow: SpringConfig\n  /** molasses: { tension: 280, friction: 120 } */\n  molasses: SpringConfig\n}\n\nexport class Spring<DS extends object> extends PureComponent<SpringProps<DS>> {}\n\nexport function interpolate(\n  parent: number[],\n  config: (...args: number[]) => any\n): any\n\nexport function animated<T extends ReactType>(\n  comp: T\n): ForwardRefExoticComponent<ComponentPropsWithRef<T>>\n\nexport type TransitionKeyProps = string | number\n\nexport type State = 'enter' | 'update' | 'leave'\n\nexport interface TransitionProps<\n  TItem,\n  TInit extends object = {},\n  TFrom extends object = {},\n  TEnter extends object = {},\n  TLeave extends object = {},\n  TUpdate extends object = {},\n  SpringProps extends object = {},\n  DS extends object = {}\n> extends Pick<SpringBaseProps, Exclude<keyof SpringBaseProps, 'config'>> {\n  /**\n   * Spring config, or for individual keys: fn((item,type) => config), where \"type\" can be either enter, leave or update\n   * @default config.default\n   */\n  config?: SpringConfig | ((item: TItem, type: State) => SpringConfig)\n  /**\n   * First-render initial values, if present overrides \"from\" on the first render pass. It can be \"null\" to skip first mounting transition. Otherwise it can take an object or a function (item => object)\n   */\n  initial?: TInit | ((item: TItem) => TInit) | null\n  /**\n   * Base values (from -> enter), or: item => values\n   * @default {}\n   */\n  from?: TFrom | ((item: TItem) => TFrom)\n  /**\n   * Values that apply to new elements, or: item => values\n   * @default {}\n   */\n  enter?: TEnter | ((item: TItem) => TEnter)\n  /**\n   * Values that apply to leaving elements, or: item => values\n   * @default {}\n   */\n  leave?: TLeave | ((item: TItem) => TLeave)\n  /**\n   * Callback when the animation comes to a still-stand\n   */\n  onRest?: (ds: DS) => void\n\n  /**\n   * Values that apply to elements that are neither entering nor leaving (you can use this to update present elements), or: item => values\n   */\n  update?: TUpdate | ((item: TItem) => TUpdate)\n  /**\n   * The same keys you would normally hand over to React in a list. Keys can be specified as a key-accessor function, an array of keys, or a single value\n   */\n  keys?:\n    | ((item: TItem) => TransitionKeyProps)\n    | Array<TransitionKeyProps>\n    | TransitionKeyProps\n  /**\n   * An array of items to be displayed, this is used by Transition as the primary means of detecting changes.\n   * @default {}\n   */\n  items: TItem[] | TItem\n  /**\n   * A single function-child that receives the individual item and return a functional component ((item, state, index) => props => view)\n   */\n  children?: (\n    item: TItem,\n    state: State,\n    index: number\n  ) =>\n    | boolean\n    | null\n    | SpringRendererFunc<TInit & TFrom & TEnter & TLeave & TUpdate>\n  /**\n   * Calls back once a transition is about to wrap up\n   */\n  onDestroyed?: (item: TItem) => void\n  /**\n   * Useful in combination with \"unique\", when true it forces incoming items that already exist to restart instead of adapting to their current values\n   * @default false\n   */\n  reset?: boolean\n  /**\n   * Trailing delay in ms\n   */\n  trail?: number\n  /**\n   * When true enforces that an item can only occur once instead of allowing two or more items with the same key to co-exist in a stack\n   * @default false\n   */\n  unique?: boolean\n}\n\nexport class Transition<\n  TItem,\n  TInit extends object,\n  TFrom extends object,\n  TEnter extends object,\n  TLeave extends object,\n  TUpdate extends object\n> extends PureComponent<\n  TransitionProps<TItem, TInit, TFrom, TEnter, TLeave, TUpdate>\n> {}\n\ntype TrailKeyProps = string | number\n\n/**\n * Relay interface to override inheritance property\n */\ninterface TrailPropsWeaken extends SpringProps {\n  children?: any\n}\ninterface TrailProps<TItem, DS extends object = {}> extends TrailPropsWeaken {\n  /**\n   * Base values, optional\n   */\n  from?: Partial<DS>\n  /**\n   * Animates to ...\n   */\n  to?: DS\n  /**\n   * An array of items to be displayed, use this if you need access to the actual items when distributing values as functions\n   */\n  items: TItem[] | TItem\n  /**\n   * Item keys (the same keys you'd hand over to react in a list). If you specify items, keys can be an accessor function (item => item.key)\n   * @default item => item\n   */\n  keys?: ((item: TItem) => TrailKeyProps) | Array<TrailKeyProps> | TrailKeyProps\n  /**\n   * A single function-child that receives the individual item and return a functional component (item, index) => props => view)\n   */\n  children: (item: TItem, index: number) => SpringRendererFunc<DS>\n}\n\nexport class Trail<TItem, DS extends object> extends PureComponent<\n  TrailProps<TItem, DS>\n> {}\n\ninterface KeyframesProps<DS extends object = {}> {\n  state?: string\n}\n\nexport class Keyframes<\n  S extends object,\n  DS extends object\n> extends PureComponent<KeyframesProps<DS> & S> {\n  static create<S extends object, DS extends object>(\n    primitive: ComponentType\n  ): (states: object) => (props: object) => Keyframes<S, DS>\n  static Spring<S extends object, DS extends object>(\n    states: object\n  ): (\n    props: object\n  ) => Keyframes<\n    S | Pick<SpringProps<DS>, Exclude<keyof SpringProps<DS>, 'to'>>,\n    DS\n  >\n  static Trail<S extends object, DS extends object>(\n    states: object\n  ): (\n    props: object\n  ) => Keyframes<\n    S | Pick<TrailProps<DS>, Exclude<keyof TrailProps<DS>, 'to'>>,\n    DS\n  >\n  static Transition<S extends object, DS extends object>(\n    states: object\n  ): (\n    props: object\n  ) => Keyframes<\n    S | Pick<TransitionProps<S, DS>, Exclude<keyof TransitionProps<DS>, 'to'>>,\n    DS\n  >\n}\n"
         }
      },
      "/react-spring/renderprops.cjs.d.ts":{
         "module":{
            "code":"export * from './renderprops'"
         }
      },
      "/react-spring/renderprops.d.ts":{
         "module":{
            "code":"import { ForwardRefExoticComponent, ComponentPropsWithRef } from 'react'\nimport { animated } from './renderprops-universal'\nexport * from './renderprops-universal'\n\ndeclare const augmentedAnimated: typeof animated &\n  {\n    [Tag in keyof JSX.IntrinsicElements]: ForwardRefExoticComponent<\n      ComponentPropsWithRef<Tag>\n    >\n  }\n\nexport { augmentedAnimated as animated }\n"
         }
      },
      "/react-spring/web.cjs.d.ts":{
         "module":{
            "code":"export * from './web'"
         }
      },
      "/react-spring/web.d.ts":{
         "module":{
            "code":"import { CSSProperties, RefObject } from 'react'\nimport {\n  SpringConfig,\n  SpringBaseProps,\n  TransitionKeyProps,\n  State,\n} from './renderprops-universal'\nexport { SpringConfig, SpringBaseProps, TransitionKeyProps, State }\n\nexport { config, interpolate } from './renderprops-universal'\n// hooks are currently web-only\nexport { animated } from './renderprops'\n\n/** List from `function getForwardProps` in `src/shared/helpers` */\ntype ExcludedProps =\n  | 'to'\n  | 'from'\n  | 'config'\n  | 'onStart'\n  | 'onRest'\n  | 'onFrame'\n  | 'children'\n  | 'reset'\n  | 'reverse'\n  | 'force'\n  | 'immediate'\n  | 'delay'\n  | 'attach'\n  | 'destroyed'\n  | 'interpolateTo'\n  | 'ref'\n  | 'lazy'\n\n// The config options for an interoplation. It maps out from in \"in\" type\n// to an \"out\" type.\nexport type InterpolationConfig<T, U = T> = {\n  range: T[]\n  output: U[]\n}\n\n// The InterpolationChain is either a function that takes a config object\n// and returns the next chainable type or it is a function that takes in params\n// and maps out to another InterpolationChain.\nexport interface InterpolationChain<T> {\n  <U>(config: InterpolationConfig<T, U>): OpaqueInterpolation<U>\n  <U>(interpolator: (params: T) => U): OpaqueInterpolation<U>\n}\n\n// The opaque interpolation masks as its original type but provides to helpers\n// for chaining the interpolate method and getting its raw value.\nexport type OpaqueInterpolation<T> = {\n  interpolate: InterpolationChain<T>\n  getValue: () => T\n} & T\n\n// Map all keys to our OpaqueInterpolation type which can either be interpreted\n// as its initial value by \"animated.{tag}\" or chained with interpolations.\nexport type AnimatedValue<T extends object> = {\n  [P in keyof T]: OpaqueInterpolation<T[P]>\n}\n\n// Make ForwardedProps chainable with interpolate / make it an animated value.\nexport type ForwardedProps<T> = Pick<T, Exclude<keyof T, ExcludedProps>>\n\n// NOTE: because of the Partial, this makes a weak type, which can have excess props\ntype InferFrom<T extends object> = T extends { to: infer TTo }\n  ? Partial<TTo>\n  : Partial<ForwardedProps<T>>\n\n// This is similar to \"Omit<A, keyof B> & B\",\n//  but with a delayed evaluation that still allows A to be inferrable\ntype Merge<A, B> = { [K in keyof A]: K extends keyof B ? B[K] : A[K] } & B\n\nexport type SetUpdateFn<DS extends object> = (ds: Partial<UseSpringProps<DS>>) => void\nexport interface SetUpdateCallbackFn<DS extends object> {\n  (ds: Partial<UseSpringProps<DS>>): void;\n  (i: number): Partial<UseSpringProps<DS>>;\n}\n\n// The hooks do emulate React's 'ref' by accepting { ref?: React.RefObject<Controller> } and\n// updating it. However, there are no types for Controller, and I assume it is intentionally so.\n// This is a partial interface for Controller that has only the properties needed for useChain to work.\nexport interface ReactSpringHook {\n  start(): void\n  stop(): void\n}\n\nexport function useChain(refs: ReadonlyArray<RefObject<ReactSpringHook>>): void\n// this looks like it can just be a single overload, but we don't want to allow\n// timeFrame to be specifiable when timeSteps is explicitly \"undefined\"\nexport function useChain(\n  refs: ReadonlyArray<RefObject<ReactSpringHook>>,\n  timeSteps: number[],\n  timeFrame?: number\n): void\n\nexport interface HooksBaseProps\n  extends Pick<SpringBaseProps, Exclude<keyof SpringBaseProps, 'config'>> {\n  /**\n   * Will skip rendering the component if true and write to the dom directly.\n   * @default true\n   * @deprecated\n   */\n  native?: never\n  // there is an undocumented onKeyframesHalt which passes the controller instance,\n  // so it also cannot be typed unless Controller types are written\n  ref?: React.RefObject<ReactSpringHook>\n}\n\nexport interface UseSpringBaseProps extends HooksBaseProps {\n  config?: SpringBaseProps['config']\n}\n\nexport type UseSpringProps<DS extends object> = Merge<\n  DS & UseSpringBaseProps,\n  {\n    from?: InferFrom<DS>\n    /**\n     * Callback when the animation comes to a still-stand\n     */\n    onRest?(ds: InferFrom<DS>): void\n  }\n>\n\ntype OverwriteKeys<A, B> = { [K in keyof A]: K extends keyof B ? B[K] : A[K] };\n\n// there's a third value in the tuple but it's not public API (?)\nexport function useSpring<DS extends object>(\n  values: UseSpringProps<Merge<DS, CSSProperties>>\n): AnimatedValue<ForwardedProps<OverwriteKeys<DS, CSSProperties>>>\nexport function useSpring<DS extends object>(\n  getProps: () => UseSpringProps<Merge<DS, CSSProperties>>\n): [AnimatedValue<ForwardedProps<OverwriteKeys<DS, CSSProperties>>>, SetUpdateFn<OverwriteKeys<DS, CSSProperties>>]\n\n// there's a third value in the tuple but it's not public API (?)\nexport function useSprings<TItem, DS extends CSSProperties>(\n  count: number,\n  items: ReadonlyArray<TItem>,\n): ForwardedProps<DS>[] // safe to modify (result of .map)\nexport function useSprings<DS extends object>(\n  count: number,\n  getProps: (i: number) => UseSpringProps<DS>\n): [AnimatedValue<ForwardedProps<DS>>[], SetUpdateCallbackFn<DS>]\n\n// there's a third value in the tuple but it's not public API (?)\nexport function useTrail<DS extends CSSProperties>(\n  count: number,\n  getProps: () => UseSpringProps<DS & CSSProperties>\n): [ForwardedProps<DS>[], SetUpdateFn<DS>]\nexport function useTrail<DS extends CSSProperties>(\n  count: number,\n  values: UseSpringProps<DS & CSSProperties>\n): ForwardedProps<DS>[] // safe to modify (result of .map)\nexport function useTrail<DS extends object>(\n  count: number,\n  getProps: () => UseSpringProps<DS>\n): [AnimatedValue<ForwardedProps<DS>>[], SetUpdateFn<DS>]\nexport function useTrail<DS extends object>(\n  count: number,\n  values: UseSpringProps<DS>\n): AnimatedValue<ForwardedProps<DS>>[] // safe to modify (result of .map)\n\nexport interface UseTransitionProps<TItem, DS extends object>\n  extends HooksBaseProps {\n  /**\n   * Spring config, or for individual items: fn(item => config)\n   * @default config.default\n   */\n  config?: SpringConfig | ((item: TItem) => SpringConfig)\n\n  /**\n   * When true enforces that an item can only occur once instead of allowing two or more items with the same key to co-exist in a stack\n   * @default false\n   */\n  unique?: boolean\n  /**\n   * Trailing delay in ms\n   */\n  trail?: number\n\n  from?: InferFrom<DS> | ((item: TItem) => InferFrom<DS>)\n  /**\n   * Values that apply to new elements, or: item => values\n   * @default {}\n   */\n  enter?: InferFrom<DS> | InferFrom<DS>[] | ((item: TItem) => InferFrom<DS>)\n  /**\n   * Values that apply to leaving elements, or: item => values\n   * @default {}\n   */\n  leave?: InferFrom<DS> | InferFrom<DS>[] | ((item: TItem) => InferFrom<DS>)\n  /**\n   * Values that apply to elements that are neither entering nor leaving (you can use this to update present elements), or: item => values\n   */\n  update?: InferFrom<DS> | InferFrom<DS>[] | ((item: TItem) => InferFrom<DS>)                           \n  /**\n   * Initial (first time) base values, optional (can be null)\n   */\n  initial?: InferFrom<DS> | ((item: TItem) => InferFrom<DS>) |Â null\n  /**\n   * Called when objects have disappeared for good\n   */\n  onDestroyed?: (isDestroyed: boolean) => void\n}\n\nexport interface UseTransitionResult<TItem, DS extends object> {\n  item: TItem\n  key: string\n  state: State\n  props: AnimatedValue<ForwardedProps<DS>>\n}\n\nexport function useTransition<TItem, DS extends CSSProperties>(\n  items: ReadonlyArray<TItem> | TItem | null | undefined,\n  keys:\n    | ((item: TItem) => TransitionKeyProps)\n    | ReadonlyArray<TransitionKeyProps>\n    | TransitionKeyProps\n    | null,\n  values: Merge<DS & CSSProperties, UseTransitionProps<TItem, DS>>\n): UseTransitionResult<TItem, ForwardedProps<DS>>[] // result array is safe to modify\nexport function useTransition<TItem, DS extends object>(\n  items: ReadonlyArray<TItem> | TItem | null | undefined,\n  keys:\n    | ((item: TItem) => TransitionKeyProps)\n    | ReadonlyArray<TransitionKeyProps>\n    | TransitionKeyProps           \n    | null,\n  values: Merge<DS, UseTransitionProps<TItem, DS>>\n): UseTransitionResult<TItem, AnimatedValue<ForwardedProps<DS>>>[] // result array is safe to modify\n"
         }
      }
   }
}