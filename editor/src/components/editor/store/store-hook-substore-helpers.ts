import type { EditorState } from './editor-state'

export const EmptyEditorStateForKeysOnly: EditorState = {
  id: null,
  forkedFromProjectId: null,
  appID: null,
  projectName: null as any,
  projectDescription: 'Made with Utopia',
  projectVersion: null as any,
  isLoaded: false,
  trueUpElementsAfterDomWalkerRuns: [],
  spyMetadata: null as any,
  domMetadata: null as any,
  jsxMetadata: null as any,
  elementPathTree: {},
  projectContents: {},
  codeResultCache: null as any,
  propertyControlsInfo: null as any,
  nodeModules: {
    skipDeepFreeze: true,
    files: {},
    projectFilesBuildResults: {},
    packageStatus: {},
  },
  selectedViews: [],
  highlightedViews: [],
  hoveredViews: [],
  hiddenInstances: [],
  displayNoneInstances: [],
  warnedInstances: [],
  lockedElements: {
    simpleLock: [],
    hierarchyLock: [],
  },
  mode: null as any,
  focusedPanel: 'canvas',
  keysPressed: {},
  mouseButtonsPressed: null as any,
  openPopupId: null,
  toasts: [],
  cursorStack: {
    fixed: null,
    mouseOver: [],
  },
  leftMenu: {
    selectedTab: null as any,
    visible: false,
  },
  rightMenu: {
    selectedTab: null as any,
    visible: true,
  },
  interfaceDesigner: {
    codePaneVisible: false,
    additionalControls: true,
  },
  canvas: {
    elementsToRerender: 'rerender-all-elements',
    interactionSession: null,
    scale: 1,
    snappingThreshold: null as any,
    realCanvasOffset: null as any,
    roundedCanvasOffset: null as any,
    textEditor: null,
    selectionControlsVisible: true,
    cursor: null,
    duplicationState: null,
    base64Blobs: {},
    mountCount: 0,
    canvasContentInvalidateCount: 0,
    domWalkerInvalidateCount: 0,
    openFile: {
      filename: null as any,
    },
    scrollAnimation: false,
    transientProperties: null,
    resizeOptions: {
      propertyTargetOptions: ['width', 'height'],
      propertyTargetSelectedIndex: 0,
    },
    domWalkerAdditionalElementsToUpdate: [],
    controls: {
      snappingGuidelines: [],
      outlineHighlights: [],
      strategyIntendedBounds: [],
      flexReparentTargetLines: [],
      parentHighlightPaths: null,
      reparentedToPaths: [],
      dragToMoveIndicatorFlags: null as any,
      parentOutlineHighlight: null,
      gridControls: null,
    },
  },
  inspector: {
    visible: true,
    classnameFocusCounter: 0,
  },
  dependencyList: {
    minimised: false,
  },
  genericExternalResources: {
    minimised: true,
  },
  googleFontsResources: {
    minimised: true,
  },
  projectSettings: {
    minimised: false,
  },
  fileBrowser: {
    minimised: false,
    dropTarget: null,
    renamingTarget: null,
  },
  navigator: {
    minimised: false,
    dropTargetHint: null,
    collapsedViews: [],
    renamingTarget: null,
    highlightedTargets: [],
    hiddenInNavigator: [],
  },
  topmenu: {
    formulaBarMode: 'content',
    formulaBarFocusCounter: 0,
  },
  preview: {
    visible: false,
    connected: false,
  },
  home: {
    visible: false,
  },
  lastUsedFont: null,
  modal: null,
  localProjectList: [],
  projectList: [],
  showcaseProjects: [],
  codeEditorErrors: {
    buildErrors: {},
    lintErrors: {},
    componentDescriptorErrors: {},
  },
  thumbnailLastGenerated: 0,
  pasteTargetsToIgnore: [],
  parseOrPrintInFlight: false,
  previousParseOrPrintSkipped: false,
  safeMode: false,
  saveError: false,
  vscodeBridgeReady: false,
  vscodeReady: false,
  focusedElementPath: null,
  config: null as any,
  vscodeLoadingScreenVisible: true,
  indexedDBFailed: false,
  forceParseFiles: [],
  allElementProps: {},
  currentAllElementProps: {},
  variablesInScope: {},
  currentVariablesInScope: {},
  githubSettings: null as any,
  imageDragSessionState: null as any,
  githubOperations: [],
  branchOriginContents: null,
  githubData: null as any,
  refreshingDependencies: false,
  colorSwatches: [],
  internalClipboard: {
    styleClipboard: [],
    elements: [],
  },
  filesModifiedByAnotherUser: [],
  activeFrames: [],
  commentFilterMode: 'all',
  forking: false,
  collaborators: [],
  sharingDialogOpen: false,
  editorRemixConfig: {
    errorBoundaryHandling: 'ignore-error-boundaries',
  },
}
