import { initTsIncrementalBuild } from '../core/workers/ts/ts-worker'
import { SampleFileBuildResult, SampleFileBundledExportsInfo } from './codeBundle'
import { InitialNpmTypeDefinitions } from './npmBundle'

import * as fs from 'fs'
import type {
  BuildResultMessage,
  MultiFileBuildResult,
  ExportsInfo,
} from '../core/workers/common/worker-types'
import { simpleDefaultProjectPreParsed } from '../sample-projects/sample-project-utils.test-utils'

function getBuildResultMessageForDefaultProject(onResult: (result: BuildResultMessage) => void) {
  const project = simpleDefaultProjectPreParsed()
  // can I make a worker?!?!?!
  initTsIncrementalBuild(
    InitialNpmTypeDefinitions,
    project.projectContents,
    'build',
    (receivedContent) => {
      switch (receivedContent.type) {
        case 'initcomplete':
          break
        case 'build': {
          onResult(receivedContent)
          break
        }
        default:
          throw new Error(
            `Expected a 'build' message from tsworker, received ${receivedContent.type}`,
          )
      }
    },
    'noid',
  )
}

describe('Code Bundle integrity check', () => {
  // The 'Update Saved Bundle' test updates the code this test runs against.
  it('the bundle generated by typescript matches the saved one', () => {
    expect.assertions(2)
    getBuildResultMessageForDefaultProject((receivedContent) => {
      const buildResult = receivedContent.buildResult
      const exportsInfo = receivedContent.exportsInfo

      expect(buildResult).toEqual(SampleFileBuildResult) // If this failed, you need to enable and run the test below to regenerate the code bundle
      expect(exportsInfo).toEqual(SampleFileBundledExportsInfo) // If this failed, you need to enable and run the test below to regenerate the code bundle
    })
  })

  xit('Update Saved Bundle', () => {
    // This should _only_ ever be enabled to update the bundled code (i.e. when the above test fails).
    // Once that has been updated, this should be disabled again.
    getBuildResultMessageForDefaultProject((receivedContent) => {
      const bundleFile = createCodeBundleFileTs(
        receivedContent.buildResult,
        receivedContent.exportsInfo,
      )
      fs.writeFileSync('./src/bundled-dependencies/codeBundle.ts', bundleFile)
    })
  })
})

function createCodeBundleFileTs(
  buildResult: MultiFileBuildResult,
  exportsInfo: readonly ExportsInfo[],
): string {
  const printedSanitizedExportsInfo = JSON.stringify(exportsInfo, null, 2).replace(/\\/g, '\\\\')
  const printedSanitizedBuildResult = JSON.stringify(buildResult, null, 2).replace(/\\/g, '\\\\')

  return `import { ExportsInfo } from '../core/workers/common/worker-types'

// If you wish to update this auto-generated file, go to codeBundle.spec.ts and find the test called
// 'Update Saved Bundle' and change the test function from xit(... to it(... to enable it

export const SampleFileBuildResult = JSON.parse(\`${printedSanitizedBuildResult}\`)

export const SampleFileBundledExportsInfo: Array<ExportsInfo> = JSON.parse(\`${printedSanitizedExportsInfo}\`)
`
}
