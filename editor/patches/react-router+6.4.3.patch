# generated by patch-package 6.4.8 on 2022-11-30 12:04:36
#
# command:
#   npx patch-package react-router
#
# declared package:
#   react-router: 6.4.3
#
diff --git a/node_modules/react-router/dist/index.js b/node_modules/react-router/dist/index.js
index 0eaccbe..01ee766 100644
--- a/node_modules/react-router/dist/index.js
+++ b/node_modules/react-router/dist/index.js
@@ -1272,13 +1272,13 @@ function createRoutesFromChildren(children, parentPath) {
       return;
     }
 
-    if (element.type === React.Fragment) {
+    if (element.type === React.Fragment || element.type.theOriginalType === React.Fragment) {
       // Transparently support React.Fragment and its children.
       routes.push.apply(routes, createRoutesFromChildren(element.props.children, parentPath));
       return;
     }
 
-    !(element.type === Route) ? process.env.NODE_ENV !== "production" ? invariant(false, "[" + (typeof element.type === "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>") : invariant(false) : void 0;
+    !(element.type === Route || element.type.theOriginalType === Route) ? process.env.NODE_ENV !== "production" ? invariant(false, "[" + (typeof element.type === "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>") : invariant(false) : void 0;
     !(!element.props.index || !element.props.children) ? process.env.NODE_ENV !== "production" ? invariant(false, "An index route cannot have child routes.") : invariant(false) : void 0;
     let treePath = [...parentPath, index];
     let route = {
diff --git a/node_modules/react-router/dist/react-router.development.js b/node_modules/react-router/dist/react-router.development.js
index feb7a12..1c03080 100644
--- a/node_modules/react-router/dist/react-router.development.js
+++ b/node_modules/react-router/dist/react-router.development.js
@@ -1227,13 +1227,13 @@ function createRoutesFromChildren(children, parentPath = []) {
       return;
     }
 
-    if (element.type === React.Fragment) {
+    if (element.type === React.Fragment || element.theOriginalType === React.Fragment) {
       // Transparently support React.Fragment and its children.
       routes.push.apply(routes, createRoutesFromChildren(element.props.children, parentPath));
       return;
     }
 
-    !(element.type === Route) ? invariant(false, `[${typeof element.type === "string" ? element.type : element.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`)  : void 0;
+    !(element.type === Route || element.theOriginalType === Route) ? invariant(false, `[${typeof element.type === "string" ? element.type : element.type.name}] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`)  : void 0;
     !(!element.props.index || !element.props.children) ? invariant(false, "An index route cannot have child routes.")  : void 0;
     let treePath = [...parentPath, index];
     let route = {
