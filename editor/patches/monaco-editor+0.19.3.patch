diff --git a/node_modules/monaco-editor/esm/vs/basic-languages/typescript/typescript.js b/node_modules/monaco-editor/esm/vs/basic-languages/typescript/typescript.js
index 2bd8f18..1796ab9 100644
--- a/node_modules/monaco-editor/esm/vs/basic-languages/typescript/typescript.js
+++ b/node_modules/monaco-editor/esm/vs/basic-languages/typescript/typescript.js
@@ -5,6 +5,7 @@
 'use strict';
 // Allow for running under nodejs/requirejs in tests
 var _monaco = (typeof monaco === 'undefined' ? self.monaco : monaco);
+const EMPTY_ELEMENTS = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];
 export var conf = {
     wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
     comments: {
@@ -14,7 +15,8 @@ export var conf = {
     brackets: [
         ['{', '}'],
         ['[', ']'],
-        ['(', ')']
+        ['(', ')'],
+        ["<", ">"]
     ],
     onEnterRules: [
         {
@@ -37,8 +39,31 @@ export var conf = {
             // e.g.  */|
             beforeText: /^(\t|(\ \ ))*\ \*\/\s*$/,
             action: { indentAction: _monaco.languages.IndentAction.None, removeText: 1 }
-        }
-    ],
+        },
+        // Changes mostly copied from the vscode codebase to have better jsx support, which is unavailable in monaco
+        // https://github.com/microsoft/vscode/blob/58fe34bb77aae5b596559d6dfe3cb81772e1dfca/extensions/typescript-language-features/src/features/languageConfiguration.ts
+		{
+			beforeText: new RegExp(`<(?!(?:${EMPTY_ELEMENTS.join('|')}))([_:\\w][_:\\w\\-.\\d]*)([^/>]*(?!/)>)[^<]*$`, 'i'),
+			afterText: /^<\/([_:\w][_:\w-.\d]*)\s*>$/i,
+			action: { indentAction: _monaco.languages.IndentAction.IndentOutdent }
+		},
+		{
+			beforeText: new RegExp(`<(?!(?:${EMPTY_ELEMENTS.join('|')}))([_:\\w][_:\\w\\-.\\d]*)([^/>]*(?!/)>)[^<]*$`, 'i'),
+			action: { indentAction: _monaco.languages.IndentAction.Indent }
+		},
+		{
+			// `beforeText` only applies to tokens of a given language. Since we are dealing with jsx-tags,
+			// make sure we apply to the closing `>` of a tag so that mixed language spans
+			// such as `<div onclick={1}>` are handled properly.
+			beforeText: /^[^</]*>$/,
+			afterText: /^<\/([_:\w][_:\w-.\d]*)\s*>$/i,
+			action: { indentAction: _monaco.languages.IndentAction.IndentOutdent }
+		},
+		{
+			beforeText: /^[^</]*>$/,
+			action: { indentAction: _monaco.languages.IndentAction.Indent }
+		},
+	],
     autoClosingPairs: [
         { open: '{', close: '}' },
         { open: '[', close: ']' },
diff --git a/node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/goToCommands.js b/node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/goToCommands.js
index a2b5f87..0964804 100644
--- a/node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/goToCommands.js
+++ b/node_modules/monaco-editor/esm/vs/editor/contrib/gotoSymbol/goToCommands.js
@@ -203,16 +203,18 @@ var SymbolNavigationAction = /** @class */ (function (_super) {
                         if (!targetEditor) {
                             return [2 /*return*/, undefined];
                         }
+                        
+                        const safeTargetEditor = targetEditor.hasOwnProperty('getModel') ? targetEditor : targetEditor.getControl()
                         if (highlight) {
-                            modelNow_1 = targetEditor.getModel();
-                            ids_1 = targetEditor.deltaDecorations([], [{ range: range, options: { className: 'symbolHighlight' } }]);
+                            modelNow_1 = safeTargetEditor.getModel();
+                            ids_1 = safeTargetEditor.deltaDecorations([], [{ range: range, options: { className: 'symbolHighlight' } }]);
                             setTimeout(function () {
-                                if (targetEditor.getModel() === modelNow_1) {
-                                    targetEditor.deltaDecorations(ids_1, []);
+                                if (safeTargetEditor.getModel() === modelNow_1) {
+                                    safeTargetEditor.deltaDecorations(ids_1, []);
                                 }
                             }, 350);
                         }
-                        return [2 /*return*/, targetEditor];
+                        return [2 /*return*/, safeTargetEditor];
                 }
             });
         });
