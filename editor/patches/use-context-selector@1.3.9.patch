diff --git a/dist/index.modern.js b/dist/index.modern.js
index a4391fe..01d2159 100644
--- a/dist/index.modern.js
+++ b/dist/index.modern.js
@@ -1,2 +1,2 @@
-import{createContext as e,useRef as r,createElement as t,useContext as n,useReducer as o,useEffect as c,useLayoutEffect as u}from"react";import{unstable_runWithPriority as s,unstable_NormalPriority as i}from"scheduler";import{unstable_batchedUpdates as d}from"react-dom";const p=Symbol(),a=Symbol(),f="undefined"==typeof window||/ServerSideRendering/.test(window.navigator&&window.navigator.userAgent)?c:u,l=s?e=>s(i,e):e=>e(),v=e=>e;function w(n){const o=e({[p]:{v:{current:n},n:{current:-1},l:new Set,u:e=>e()}});var c;return o[a]=o.Provider,o.Provider=(c=o.Provider,({value:e,children:n})=>{const o=r(e),u=r(0),s=r();if(!s.current){const e=new Set,r=r=>{d(()=>{u.current+=1,e.forEach(e=>e([u.current])),r()})};s.current={[p]:{v:o,n:u,l:e,u:r}}}return f(()=>{o.current=e,u.current+=1,l(()=>{s.current[p].l.forEach(r=>{r([u.current,e])})})},[e]),t(c,{value:s.current},n)}),delete o.Consumer,o}function E(e,r){const t=n(e)[p];if("object"==typeof process&&"production"!==process.env.NODE_ENV&&!t)throw new Error("useContextSelector requires special context");const{v:{current:c},n:{current:u},l:s}=t,i=r(c),[d,a]=o((e,t)=>{if(!t)return[c,i];if(t[0]===u)return Object.is(e[1],i)?e:[c,i];try{if(2===t.length){if(Object.is(e[0],t[1]))return e;const n=r(t[1]);return Object.is(e[1],n)?e:[t[1],n]}}catch(e){}return[...e]},[c,i]);return Object.is(d[1],i)||a(),f(()=>(s.add(a),()=>{s.delete(a)}),[s]),d[1]}function h(e){return E(e,v)}function b(e){const r=n(e)[p];if("object"==typeof process&&"production"!==process.env.NODE_ENV&&!r)throw new Error("useContextUpdate requires special context");const{u:t}=r;return t}const m=({context:e,value:r,children:n})=>{const{[a]:o}=e;if("object"==typeof process&&"production"!==process.env.NODE_ENV&&!o)throw new Error("BridgeProvider requires special context");return t(o,{value:r},n)},x=e=>{const r=n(e);if("object"==typeof process&&"production"!==process.env.NODE_ENV&&!r[p])throw new Error("useBridgeValue requires special context");return r};export{m as BridgeProvider,w as createContext,x as useBridgeValue,h as useContext,E as useContextSelector,b as useContextUpdate};
+import{createContext as e,useRef as r,createElement as t,useContext as n,useReducer as o,useEffect as c,useLayoutEffect as u}from"react";import{unstable_runWithPriority as s,unstable_NormalPriority as i}from"scheduler";import{unstable_batchedUpdates as d}from"react-dom";const p=Symbol(),a=Symbol(),f="undefined"==typeof window||/ServerSideRendering/.test(window.navigator&&window.navigator.userAgent)?c:u,l=s?e=>s(i,e):e=>e(),v=e=>e;function w(n){const o=e({[p]:{v:{current:n},n:{current:-1},l:new Set,u:e=>e()}});var c;return o[a]=o.Provider,o.Provider=(c=o.Provider,({value:e,children:n})=>{const o=r(e),u=r(0),s=r();if(!s.current){const e=new Set,r=r=>{d(()=>{u.current+=1,e.forEach(e=>e([u.current])),r()})};s.current={[p]:{v:o,n:u,l:e,u:r}}}return f(()=>{o.current=e,u.current+=1,l(()=>{s.current[p].l.forEach(r=>{r([u.current,e])})})},[e]),t(c,{value:s.current},n)}),delete o.Consumer,o}function E(e,r,t=Object.is){const c=n(e)[p];if("object"==typeof process&&"production"!==process.env.NODE_ENV&&!c)throw new Error("useContextSelector requires special context");const{v:{current:u},n:{current:s},l:i}=c,d=r(u),[a,l]=o((e,n)=>{if(!n)return[u,d];if(n[0]===s)return t(e[1],d)?e:[u,d];try{if(2===n.length){if(t(e[0],n[1]))return e;const o=r(n[1]);return t(e[1],o)?e:[n[1],o]}}catch(e){}return[...e]},[u,d]);return t(a[1],d)||l(),f(()=>(i.add(l),()=>{i.delete(l)}),[i]),a[1]}function h(e){return E(e,v)}function m(e){const r=n(e)[p];if("object"==typeof process&&"production"!==process.env.NODE_ENV&&!r)throw new Error("useContextUpdate requires special context");const{u:t}=r;return t}const x=({context:e,value:r,children:n})=>{const{[a]:o}=e;if("object"==typeof process&&"production"!==process.env.NODE_ENV&&!o)throw new Error("BridgeProvider requires special context");return t(o,{value:r},n)},y=e=>{const r=n(e);if("object"==typeof process&&"production"!==process.env.NODE_ENV&&!r[p])throw new Error("useBridgeValue requires special context");return r};export{x as BridgeProvider,w as createContext,y as useBridgeValue,h as useContext,E as useContextSelector,m as useContextUpdate};
 //# sourceMappingURL=index.modern.mjs.map
diff --git a/dist/index.modern.js.map b/dist/index.modern.js.map
index 7e6ddaa..400462e 100644
--- a/dist/index.modern.js.map
+++ b/dist/index.modern.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.modern.mjs","sources":["../src/index.ts"],"sourcesContent":["import {\n  ComponentType,\n  Context as ContextOrig,\n  FC,\n  MutableRefObject,\n  Provider,\n  createElement,\n  createContext as createContextOrig,\n  useContext as useContextOrig,\n  useEffect,\n  useLayoutEffect,\n  useReducer,\n  useRef,\n} from 'react';\nimport {\n  unstable_NormalPriority as NormalPriority,\n  unstable_runWithPriority as runWithPriority,\n} from 'scheduler';\n\nimport { batchedUpdates } from './batchedUpdates';\n\nconst CONTEXT_VALUE = Symbol();\nconst ORIGINAL_PROVIDER = Symbol();\n\nconst isSSR = typeof window === 'undefined'\n  || /ServerSideRendering/.test(window.navigator && window.navigator.userAgent);\n\nconst useIsomorphicLayoutEffect = isSSR ? useEffect : useLayoutEffect;\n\n// for preact that doesn't have runWithPriority\nconst runWithNormalPriority = runWithPriority\n  ? (thunk: () => void) => runWithPriority(NormalPriority, thunk)\n  : (thunk: () => void) => thunk();\n\ntype Version = number;\n\ntype ContextValue<Value> = {\n  [CONTEXT_VALUE]: {\n    /* \"v\"alue     */ v: MutableRefObject<Value>;\n    /* versio\"n\"   */ n: MutableRefObject<Version>;\n    /* \"l\"isteners */ l: Set<(action: readonly [Version] | readonly [Version, Value]) => void>;\n    /* \"u\"pdate    */ u: (thunk: () => void) => void;\n  };\n};\n\nexport interface Context<Value> {\n  Provider: ComponentType<{ value: Value }>;\n  displayName?: string;\n}\n\nconst createProvider = <Value>(\n  ProviderOrig: Provider<ContextValue<Value>>,\n): FC<{ value: Value }> => ({ value, children }) => {\n    const valueRef = useRef(value);\n    const versionRef = useRef(0);\n    const contextValue = useRef<ContextValue<Value>>();\n    if (!contextValue.current) {\n      const listeners = new Set<(action: readonly [Version] | readonly [Version, Value]) => void>();\n      const update = (thunk: () => void) => {\n        batchedUpdates(() => {\n          versionRef.current += 1;\n          listeners.forEach((listener) => listener([versionRef.current]));\n          thunk();\n        });\n      };\n      contextValue.current = {\n        [CONTEXT_VALUE]: {\n          /* \"v\"alue     */ v: valueRef,\n          /* versio\"n\"   */ n: versionRef,\n          /* \"l\"isteners */ l: listeners,\n          /* \"u\"pdate    */ u: update,\n        },\n      };\n    }\n    useIsomorphicLayoutEffect(() => {\n      valueRef.current = value;\n      versionRef.current += 1;\n      runWithNormalPriority(() => {\n        (contextValue.current as ContextValue<Value>)[CONTEXT_VALUE].l.forEach((listener) => {\n          listener([versionRef.current, value]);\n        });\n      });\n    }, [value]);\n    return createElement(ProviderOrig, { value: contextValue.current }, children);\n  };\n\nconst identity = <T>(x: T) => x;\n\n/**\n * This creates a special context for `useContextSelector`.\n *\n * @example\n * import { createContext } from 'use-context-selector';\n *\n * const PersonContext = createContext({ firstName: '', familyName: '' });\n */\nexport function createContext<Value>(defaultValue: Value) {\n  const context = createContextOrig<ContextValue<Value>>({\n    [CONTEXT_VALUE]: {\n      /* \"v\"alue     */ v: { current: defaultValue },\n      /* versio\"n\"   */ n: { current: -1 },\n      /* \"l\"isteners */ l: new Set(),\n      /* \"u\"pdate    */ u: (f) => f(),\n    },\n  });\n  (context as unknown as {\n    [ORIGINAL_PROVIDER]: Provider<ContextValue<Value>>;\n  })[ORIGINAL_PROVIDER] = context.Provider;\n  (context as unknown as Context<Value>).Provider = createProvider(context.Provider);\n  delete (context as any).Consumer; // no support for Consumer\n  return context as unknown as Context<Value>;\n}\n\n/**\n * This hook returns context selected value by selector.\n *\n * It will only accept context created by `createContext`.\n * It will trigger re-render if only the selected value is referentially changed.\n *\n * The selector should return referentially equal result for same input for better performance.\n *\n * @example\n * import { useContextSelector } from 'use-context-selector';\n *\n * const firstName = useContextSelector(PersonContext, state => state.firstName);\n */\nexport function useContextSelector<Value, Selected>(\n  context: Context<Value>,\n  selector: (value: Value) => Selected,\n) {\n  const contextValue = useContextOrig(\n    context as unknown as ContextOrig<ContextValue<Value>>,\n  )[CONTEXT_VALUE];\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!contextValue) {\n      throw new Error('useContextSelector requires special context');\n    }\n  }\n  const {\n    /* \"v\"alue     */ v: { current: value },\n    /* versio\"n\"   */ n: { current: version },\n    /* \"l\"isteners */ l: listeners,\n  } = contextValue;\n  const selected = selector(value);\n  const [state, dispatch] = useReducer((\n    prev: readonly [Value, Selected],\n    next?: // undefined from render below\n      | readonly [Version] // from useContextUpdate\n      | readonly [Version, Value], // from provider effect\n  ) => {\n    if (!next) {\n      return [value, selected] as const;\n    }\n    if (next[0] === version) {\n      if (Object.is(prev[1], selected)) {\n        return prev; // bail out\n      }\n      return [value, selected] as const;\n    }\n    try {\n      if (next.length === 2) {\n        if (Object.is(prev[0], next[1])) {\n          return prev; // do not update\n        }\n        const nextSelected = selector(next[1]);\n        if (Object.is(prev[1], nextSelected)) {\n          return prev; // do not update\n        }\n        return [next[1], nextSelected] as const;\n      }\n    } catch (e) {\n      // ignored (stale props or some other reason)\n    }\n    return [...prev] as const; // schedule update\n  }, [value, selected] as const);\n  if (!Object.is(state[1], selected)) {\n    // schedule re-render\n    // this is safe because it's self contained\n    dispatch();\n  }\n  useIsomorphicLayoutEffect(() => {\n    listeners.add(dispatch);\n    return () => {\n      listeners.delete(dispatch);\n    };\n  }, [listeners]);\n  return state[1];\n}\n\n/**\n * This hook returns the entire context value.\n * Use this instead of React.useContext for consistent behavior.\n *\n * @example\n * import { useContext } from 'use-context-selector';\n *\n * const person = useContext(PersonContext);\n */\nexport function useContext<Value>(context: Context<Value>) {\n  return useContextSelector(context, identity);\n}\n\n/**\n * This hook returns an update function that accepts a thunk function\n *\n * Use this for a function that will change a value in\n * [Concurrent Mode](https://reactjs.org/docs/concurrent-mode-intro.html).\n * Otherwise, there's no need to use this hook.\n *\n * @example\n * import { useContextUpdate } from 'use-context-selector';\n *\n * const update = useContextUpdate();\n * update(() => setState(...));\n */\nexport function useContextUpdate<Value>(context: Context<Value>) {\n  const contextValue = useContextOrig(\n    context as unknown as ContextOrig<ContextValue<Value>>,\n  )[CONTEXT_VALUE];\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!contextValue) {\n      throw new Error('useContextUpdate requires special context');\n    }\n  }\n  const { u: update } = contextValue;\n  return update;\n}\n\n/**\n * This is a Provider component for bridging multiple react roots\n *\n * @example\n * const valueToBridge = useBridgeValue(PersonContext);\n * return (\n *   <Renderer>\n *     <BridgeProvider context={PersonContext} value={valueToBridge}>\n *       {children}\n *     </BridgeProvider>\n *   </Renderer>\n * );\n */\nexport const BridgeProvider: FC<{\n  context: Context<any>;\n  value: any;\n}> = ({ context, value, children }) => {\n  const { [ORIGINAL_PROVIDER]: ProviderOrig } = context as unknown as {\n    [ORIGINAL_PROVIDER]: Provider<unknown>;\n  };\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!ProviderOrig) {\n      throw new Error('BridgeProvider requires special context');\n    }\n  }\n  return createElement(ProviderOrig, { value }, children);\n};\n\n/**\n * This hook return a value for BridgeProvider\n */\nexport const useBridgeValue = (context: Context<any>) => {\n  const bridgeValue = useContextOrig(context as unknown as ContextOrig<ContextValue<unknown>>);\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!bridgeValue[CONTEXT_VALUE]) {\n      throw new Error('useBridgeValue requires special context');\n    }\n  }\n  return bridgeValue as any;\n};\n"],"names":["CONTEXT_VALUE","Symbol","ORIGINAL_PROVIDER","useIsomorphicLayoutEffect","window","test","navigator","userAgent","useEffect","useLayoutEffect","runWithNormalPriority","runWithPriority","thunk","NormalPriority","identity","x","createContext","defaultValue","context","createContextOrig","v","current","n","l","Set","u","f","ProviderOrig","Provider","value","children","valueRef","useRef","versionRef","contextValue","listeners","update","batchedUpdates","forEach","listener","createElement","Consumer","useContextSelector","selector","useContextOrig","process","env","NODE_ENV","Error","version","selected","state","dispatch","useReducer","prev","next","Object","is","length","nextSelected","e","add","delete","useContext","useContextUpdate","BridgeProvider","useBridgeValue","bridgeValue"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"index.modern.mjs","sources":["../src/index.ts"],"sourcesContent":["import {\n  ComponentType,\n  Context as ContextOrig,\n  FC,\n  MutableRefObject,\n  Provider,\n  createElement,\n  createContext as createContextOrig,\n  useContext as useContextOrig,\n  useEffect,\n  useLayoutEffect,\n  useReducer,\n  useRef,\n} from 'react';\nimport {\n  unstable_NormalPriority as NormalPriority,\n  unstable_runWithPriority as runWithPriority,\n} from 'scheduler';\n\nimport { batchedUpdates } from './batchedUpdates';\n\nconst CONTEXT_VALUE = Symbol();\nconst ORIGINAL_PROVIDER = Symbol();\n\nconst isSSR = typeof window === 'undefined'\n  || /ServerSideRendering/.test(window.navigator && window.navigator.userAgent);\n\nconst useIsomorphicLayoutEffect = isSSR ? useEffect : useLayoutEffect;\n\n// for preact that doesn't have runWithPriority\nconst runWithNormalPriority = runWithPriority\n  ? (thunk: () => void) => runWithPriority(NormalPriority, thunk)\n  : (thunk: () => void) => thunk();\n\ntype Version = number;\n\ntype ContextValue<Value> = {\n  [CONTEXT_VALUE]: {\n    /* \"v\"alue     */ v: MutableRefObject<Value>;\n    /* versio\"n\"   */ n: MutableRefObject<Version>;\n    /* \"l\"isteners */ l: Set<(action: readonly [Version] | readonly [Version, Value]) => void>;\n    /* \"u\"pdate    */ u: (thunk: () => void) => void;\n  };\n};\n\nexport interface Context<Value> {\n  Provider: ComponentType<{ value: Value }>;\n  displayName?: string;\n}\n\nconst createProvider = <Value>(\n  ProviderOrig: Provider<ContextValue<Value>>,\n): FC<{ value: Value }> => ({ value, children }) => {\n    const valueRef = useRef(value);\n    const versionRef = useRef(0);\n    const contextValue = useRef<ContextValue<Value>>();\n    if (!contextValue.current) {\n      const listeners = new Set<(action: readonly [Version] | readonly [Version, Value]) => void>();\n      const update = (thunk: () => void) => {\n        batchedUpdates(() => {\n          versionRef.current += 1;\n          listeners.forEach((listener) => listener([versionRef.current]));\n          thunk();\n        });\n      };\n      contextValue.current = {\n        [CONTEXT_VALUE]: {\n          /* \"v\"alue     */ v: valueRef,\n          /* versio\"n\"   */ n: versionRef,\n          /* \"l\"isteners */ l: listeners,\n          /* \"u\"pdate    */ u: update,\n        },\n      };\n    }\n    useIsomorphicLayoutEffect(() => {\n      valueRef.current = value;\n      versionRef.current += 1;\n      runWithNormalPriority(() => {\n        (contextValue.current as ContextValue<Value>)[CONTEXT_VALUE].l.forEach((listener) => {\n          listener([versionRef.current, value]);\n        });\n      });\n    }, [value]);\n    return createElement(ProviderOrig, { value: contextValue.current }, children);\n  };\n\nconst identity = <T>(x: T) => x;\n\n/**\n * This creates a special context for `useContextSelector`.\n *\n * @example\n * import { createContext } from 'use-context-selector';\n *\n * const PersonContext = createContext({ firstName: '', familyName: '' });\n */\nexport function createContext<Value>(defaultValue: Value) {\n  const context = createContextOrig<ContextValue<Value>>({\n    [CONTEXT_VALUE]: {\n      /* \"v\"alue     */ v: { current: defaultValue },\n      /* versio\"n\"   */ n: { current: -1 },\n      /* \"l\"isteners */ l: new Set(),\n      /* \"u\"pdate    */ u: (f) => f(),\n    },\n  });\n  (context as unknown as {\n    [ORIGINAL_PROVIDER]: Provider<ContextValue<Value>>;\n  })[ORIGINAL_PROVIDER] = context.Provider;\n  (context as unknown as Context<Value>).Provider = createProvider(context.Provider);\n  delete (context as any).Consumer; // no support for Consumer\n  return context as unknown as Context<Value>;\n}\n\n/**\n * This hook returns context selected value by selector.\n *\n * It will only accept context created by `createContext`.\n * It will trigger re-render if only the selected value is referentially changed.\n *\n * The selector should return referentially equal result for same input for better performance.\n *\n * @example\n * import { useContextSelector } from 'use-context-selector';\n *\n * const firstName = useContextSelector(PersonContext, state => state.firstName);\n */\nexport function useContextSelector<Value, Selected>(\n  context: Context<Value>,\n  selector: (value: Value) => Selected,\n  equalityFn: <T>(prev: T, next: T) => boolean = Object.is\n) {\n  const contextValue = useContextOrig(\n    context as unknown as ContextOrig<ContextValue<Value>>,\n  )[CONTEXT_VALUE];\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!contextValue) {\n      throw new Error('useContextSelector requires special context');\n    }\n  }\n  const {\n    /* \"v\"alue     */ v: { current: value },\n    /* versio\"n\"   */ n: { current: version },\n    /* \"l\"isteners */ l: listeners,\n  } = contextValue;\n  const selected = selector(value);\n  const [state, dispatch] = useReducer((\n    prev: readonly [Value, Selected],\n    next?: // undefined from render below\n      | readonly [Version] // from useContextUpdate\n      | readonly [Version, Value], // from provider effect\n  ) => {\n    if (!next) {\n      return [value, selected] as const;\n    }\n    if (next[0] === version) {\n      if (equalityFn(prev[1], selected)) {\n        return prev; // bail out\n      }\n      return [value, selected] as const;\n    }\n    try {\n      if (next.length === 2) {\n        if (equalityFn(prev[0], next[1])) {\n          return prev; // do not update\n        }\n        const nextSelected = selector(next[1]);\n        if (equalityFn(prev[1], nextSelected)) {\n          return prev; // do not update\n        }\n        return [next[1], nextSelected] as const;\n      }\n    } catch (e) {\n      // ignored (stale props or some other reason)\n    }\n    return [...prev] as const; // schedule update\n  }, [value, selected] as const);\n  if (!equalityFn(state[1], selected)) {\n    // schedule re-render\n    // this is safe because it's self contained\n    dispatch();\n  }\n  useIsomorphicLayoutEffect(() => {\n    listeners.add(dispatch);\n    return () => {\n      listeners.delete(dispatch);\n    };\n  }, [listeners]);\n  return state[1];\n}\n\n/**\n * This hook returns the entire context value.\n * Use this instead of React.useContext for consistent behavior.\n *\n * @example\n * import { useContext } from 'use-context-selector';\n *\n * const person = useContext(PersonContext);\n */\nexport function useContext<Value>(context: Context<Value>) {\n  return useContextSelector(context, identity);\n}\n\n/**\n * This hook returns an update function that accepts a thunk function\n *\n * Use this for a function that will change a value in\n * [Concurrent Mode](https://reactjs.org/docs/concurrent-mode-intro.html).\n * Otherwise, there's no need to use this hook.\n *\n * @example\n * import { useContextUpdate } from 'use-context-selector';\n *\n * const update = useContextUpdate();\n * update(() => setState(...));\n */\nexport function useContextUpdate<Value>(context: Context<Value>) {\n  const contextValue = useContextOrig(\n    context as unknown as ContextOrig<ContextValue<Value>>,\n  )[CONTEXT_VALUE];\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!contextValue) {\n      throw new Error('useContextUpdate requires special context');\n    }\n  }\n  const { u: update } = contextValue;\n  return update;\n}\n\n/**\n * This is a Provider component for bridging multiple react roots\n *\n * @example\n * const valueToBridge = useBridgeValue(PersonContext);\n * return (\n *   <Renderer>\n *     <BridgeProvider context={PersonContext} value={valueToBridge}>\n *       {children}\n *     </BridgeProvider>\n *   </Renderer>\n * );\n */\nexport const BridgeProvider: FC<{\n  context: Context<any>;\n  value: any;\n}> = ({ context, value, children }) => {\n  const { [ORIGINAL_PROVIDER]: ProviderOrig } = context as unknown as {\n    [ORIGINAL_PROVIDER]: Provider<unknown>;\n  };\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!ProviderOrig) {\n      throw new Error('BridgeProvider requires special context');\n    }\n  }\n  return createElement(ProviderOrig, { value }, children);\n};\n\n/**\n * This hook return a value for BridgeProvider\n */\nexport const useBridgeValue = (context: Context<any>) => {\n  const bridgeValue = useContextOrig(context as unknown as ContextOrig<ContextValue<unknown>>);\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!bridgeValue[CONTEXT_VALUE]) {\n      throw new Error('useBridgeValue requires special context');\n    }\n  }\n  return bridgeValue as any;\n};\n"],"names":["CONTEXT_VALUE","Symbol","ORIGINAL_PROVIDER","useIsomorphicLayoutEffect","window","test","navigator","userAgent","useEffect","useLayoutEffect","runWithNormalPriority","runWithPriority","thunk","NormalPriority","identity","x","createContext","defaultValue","context","createContextOrig","v","current","n","l","Set","u","f","ProviderOrig","Provider","value","children","valueRef","useRef","versionRef","contextValue","listeners","update","batchedUpdates","forEach","listener","createElement","Consumer","useContextSelector","selector","equalityFn","Object","is","useContextOrig","process","env","NODE_ENV","Error","version","selected","state","dispatch","useReducer","prev","next","length","nextSelected","e","add","delete","useContext","useContextUpdate","BridgeProvider","useBridgeValue","bridgeValue"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/index.umd.js b/dist/index.umd.js
index 1f63b4d..2d93e08 100644
--- a/dist/index.umd.js
+++ b/dist/index.umd.js
@@ -1,2 +1,2 @@
-!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("react"),require("scheduler"),require("react-dom")):"function"==typeof define&&define.amd?define(["exports","react","scheduler","react-dom"],r):r((e||self).useContextSelector={},e.react,e.scheduler,e.reactDom)}(this,function(e,r,t,n){var o=Symbol(),u=Symbol(),c="undefined"==typeof window||/ServerSideRendering/.test(window.navigator&&window.navigator.userAgent)?r.useEffect:r.useLayoutEffect,i=t.unstable_runWithPriority?function(e){return t.unstable_runWithPriority(t.unstable_NormalPriority,e)}:function(e){return e()},s=function(e){return e};function f(e,t){var n=r.useContext(e)[o];if("object"==typeof process&&"production"!==process.env.NODE_ENV&&!n)throw new Error("useContextSelector requires special context");var u=n.v.current,i=n.n.current,s=n.l,f=t(u),a=r.useReducer(function(e,r){if(!r)return[u,f];if(r[0]===i)return Object.is(e[1],f)?e:[u,f];try{if(2===r.length){if(Object.is(e[0],r[1]))return e;var n=t(r[1]);return Object.is(e[1],n)?e:[r[1],n]}}catch(e){}return[].concat(e)},[u,f]),d=a[0],l=a[1];return Object.is(d[1],f)||l(),c(function(){return s.add(l),function(){s.delete(l)}},[s]),d[1]}e.BridgeProvider=function(e){var t=e.value,n=e.children,o=e.context[u];if("object"==typeof process&&"production"!==process.env.NODE_ENV&&!o)throw new Error("BridgeProvider requires special context");return r.createElement(o,{value:t},n)},e.createContext=function(e){var t,s,f=r.createContext(((t={})[o]={v:{current:e},n:{current:-1},l:new Set,u:function(e){return e()}},t));return f[u]=f.Provider,f.Provider=(s=f.Provider,function(e){var t=e.value,u=e.children,f=r.useRef(t),a=r.useRef(0),d=r.useRef();if(!d.current){var l,p=new Set;d.current=((l={})[o]={v:f,n:a,l:p,u:function(e){n.unstable_batchedUpdates(function(){a.current+=1,p.forEach(function(e){return e([a.current])}),e()})}},l)}return c(function(){f.current=t,a.current+=1,i(function(){d.current[o].l.forEach(function(e){e([a.current,t])})})},[t]),r.createElement(s,{value:d.current},u)}),delete f.Consumer,f},e.useBridgeValue=function(e){var t=r.useContext(e);if("object"==typeof process&&"production"!==process.env.NODE_ENV&&!t[o])throw new Error("useBridgeValue requires special context");return t},e.useContext=function(e){return f(e,s)},e.useContextSelector=f,e.useContextUpdate=function(e){var t=r.useContext(e)[o];if("object"==typeof process&&"production"!==process.env.NODE_ENV&&!t)throw new Error("useContextUpdate requires special context");return t.u}});
+!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("react"),require("scheduler"),require("react-dom")):"function"==typeof define&&define.amd?define(["exports","react","scheduler","react-dom"],r):r((e||self).useContextSelector={},e.react,e.scheduler,e.reactDom)}(this,function(e,r,t,n){var o=Symbol(),u=Symbol(),c="undefined"==typeof window||/ServerSideRendering/.test(window.navigator&&window.navigator.userAgent)?r.useEffect:r.useLayoutEffect,i=t.unstable_runWithPriority?function(e){return t.unstable_runWithPriority(t.unstable_NormalPriority,e)}:function(e){return e()},s=function(e){return e};function f(e,t,n){void 0===n&&(n=Object.is);var u=r.useContext(e)[o];if("object"==typeof process&&"production"!==process.env.NODE_ENV&&!u)throw new Error("useContextSelector requires special context");var i=u.v.current,s=u.n.current,f=u.l,a=t(i),d=r.useReducer(function(e,r){if(!r)return[i,a];if(r[0]===s)return n(e[1],a)?e:[i,a];try{if(2===r.length){if(n(e[0],r[1]))return e;var o=t(r[1]);return n(e[1],o)?e:[r[1],o]}}catch(e){}return[].concat(e)},[i,a]),l=d[0],p=d[1];return n(l[1],a)||p(),c(function(){return f.add(p),function(){f.delete(p)}},[f]),l[1]}e.BridgeProvider=function(e){var t=e.value,n=e.children,o=e.context[u];if("object"==typeof process&&"production"!==process.env.NODE_ENV&&!o)throw new Error("BridgeProvider requires special context");return r.createElement(o,{value:t},n)},e.createContext=function(e){var t,s,f=r.createContext(((t={})[o]={v:{current:e},n:{current:-1},l:new Set,u:function(e){return e()}},t));return f[u]=f.Provider,f.Provider=(s=f.Provider,function(e){var t=e.value,u=e.children,f=r.useRef(t),a=r.useRef(0),d=r.useRef();if(!d.current){var l,p=new Set;d.current=((l={})[o]={v:f,n:a,l:p,u:function(e){n.unstable_batchedUpdates(function(){a.current+=1,p.forEach(function(e){return e([a.current])}),e()})}},l)}return c(function(){f.current=t,a.current+=1,i(function(){d.current[o].l.forEach(function(e){e([a.current,t])})})},[t]),r.createElement(s,{value:d.current},u)}),delete f.Consumer,f},e.useBridgeValue=function(e){var t=r.useContext(e);if("object"==typeof process&&"production"!==process.env.NODE_ENV&&!t[o])throw new Error("useBridgeValue requires special context");return t},e.useContext=function(e){return f(e,s)},e.useContextSelector=f,e.useContextUpdate=function(e){var t=r.useContext(e)[o];if("object"==typeof process&&"production"!==process.env.NODE_ENV&&!t)throw new Error("useContextUpdate requires special context");return t.u}});
 //# sourceMappingURL=index.umd.js.map
diff --git a/dist/index.umd.js.map b/dist/index.umd.js.map
index f6ab724..20e6f1a 100644
--- a/dist/index.umd.js.map
+++ b/dist/index.umd.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  ComponentType,\n  Context as ContextOrig,\n  FC,\n  MutableRefObject,\n  Provider,\n  createElement,\n  createContext as createContextOrig,\n  useContext as useContextOrig,\n  useEffect,\n  useLayoutEffect,\n  useReducer,\n  useRef,\n} from 'react';\nimport {\n  unstable_NormalPriority as NormalPriority,\n  unstable_runWithPriority as runWithPriority,\n} from 'scheduler';\n\nimport { batchedUpdates } from './batchedUpdates';\n\nconst CONTEXT_VALUE = Symbol();\nconst ORIGINAL_PROVIDER = Symbol();\n\nconst isSSR = typeof window === 'undefined'\n  || /ServerSideRendering/.test(window.navigator && window.navigator.userAgent);\n\nconst useIsomorphicLayoutEffect = isSSR ? useEffect : useLayoutEffect;\n\n// for preact that doesn't have runWithPriority\nconst runWithNormalPriority = runWithPriority\n  ? (thunk: () => void) => runWithPriority(NormalPriority, thunk)\n  : (thunk: () => void) => thunk();\n\ntype Version = number;\n\ntype ContextValue<Value> = {\n  [CONTEXT_VALUE]: {\n    /* \"v\"alue     */ v: MutableRefObject<Value>;\n    /* versio\"n\"   */ n: MutableRefObject<Version>;\n    /* \"l\"isteners */ l: Set<(action: readonly [Version] | readonly [Version, Value]) => void>;\n    /* \"u\"pdate    */ u: (thunk: () => void) => void;\n  };\n};\n\nexport interface Context<Value> {\n  Provider: ComponentType<{ value: Value }>;\n  displayName?: string;\n}\n\nconst createProvider = <Value>(\n  ProviderOrig: Provider<ContextValue<Value>>,\n): FC<{ value: Value }> => ({ value, children }) => {\n    const valueRef = useRef(value);\n    const versionRef = useRef(0);\n    const contextValue = useRef<ContextValue<Value>>();\n    if (!contextValue.current) {\n      const listeners = new Set<(action: readonly [Version] | readonly [Version, Value]) => void>();\n      const update = (thunk: () => void) => {\n        batchedUpdates(() => {\n          versionRef.current += 1;\n          listeners.forEach((listener) => listener([versionRef.current]));\n          thunk();\n        });\n      };\n      contextValue.current = {\n        [CONTEXT_VALUE]: {\n          /* \"v\"alue     */ v: valueRef,\n          /* versio\"n\"   */ n: versionRef,\n          /* \"l\"isteners */ l: listeners,\n          /* \"u\"pdate    */ u: update,\n        },\n      };\n    }\n    useIsomorphicLayoutEffect(() => {\n      valueRef.current = value;\n      versionRef.current += 1;\n      runWithNormalPriority(() => {\n        (contextValue.current as ContextValue<Value>)[CONTEXT_VALUE].l.forEach((listener) => {\n          listener([versionRef.current, value]);\n        });\n      });\n    }, [value]);\n    return createElement(ProviderOrig, { value: contextValue.current }, children);\n  };\n\nconst identity = <T>(x: T) => x;\n\n/**\n * This creates a special context for `useContextSelector`.\n *\n * @example\n * import { createContext } from 'use-context-selector';\n *\n * const PersonContext = createContext({ firstName: '', familyName: '' });\n */\nexport function createContext<Value>(defaultValue: Value) {\n  const context = createContextOrig<ContextValue<Value>>({\n    [CONTEXT_VALUE]: {\n      /* \"v\"alue     */ v: { current: defaultValue },\n      /* versio\"n\"   */ n: { current: -1 },\n      /* \"l\"isteners */ l: new Set(),\n      /* \"u\"pdate    */ u: (f) => f(),\n    },\n  });\n  (context as unknown as {\n    [ORIGINAL_PROVIDER]: Provider<ContextValue<Value>>;\n  })[ORIGINAL_PROVIDER] = context.Provider;\n  (context as unknown as Context<Value>).Provider = createProvider(context.Provider);\n  delete (context as any).Consumer; // no support for Consumer\n  return context as unknown as Context<Value>;\n}\n\n/**\n * This hook returns context selected value by selector.\n *\n * It will only accept context created by `createContext`.\n * It will trigger re-render if only the selected value is referentially changed.\n *\n * The selector should return referentially equal result for same input for better performance.\n *\n * @example\n * import { useContextSelector } from 'use-context-selector';\n *\n * const firstName = useContextSelector(PersonContext, state => state.firstName);\n */\nexport function useContextSelector<Value, Selected>(\n  context: Context<Value>,\n  selector: (value: Value) => Selected,\n) {\n  const contextValue = useContextOrig(\n    context as unknown as ContextOrig<ContextValue<Value>>,\n  )[CONTEXT_VALUE];\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!contextValue) {\n      throw new Error('useContextSelector requires special context');\n    }\n  }\n  const {\n    /* \"v\"alue     */ v: { current: value },\n    /* versio\"n\"   */ n: { current: version },\n    /* \"l\"isteners */ l: listeners,\n  } = contextValue;\n  const selected = selector(value);\n  const [state, dispatch] = useReducer((\n    prev: readonly [Value, Selected],\n    next?: // undefined from render below\n      | readonly [Version] // from useContextUpdate\n      | readonly [Version, Value], // from provider effect\n  ) => {\n    if (!next) {\n      return [value, selected] as const;\n    }\n    if (next[0] === version) {\n      if (Object.is(prev[1], selected)) {\n        return prev; // bail out\n      }\n      return [value, selected] as const;\n    }\n    try {\n      if (next.length === 2) {\n        if (Object.is(prev[0], next[1])) {\n          return prev; // do not update\n        }\n        const nextSelected = selector(next[1]);\n        if (Object.is(prev[1], nextSelected)) {\n          return prev; // do not update\n        }\n        return [next[1], nextSelected] as const;\n      }\n    } catch (e) {\n      // ignored (stale props or some other reason)\n    }\n    return [...prev] as const; // schedule update\n  }, [value, selected] as const);\n  if (!Object.is(state[1], selected)) {\n    // schedule re-render\n    // this is safe because it's self contained\n    dispatch();\n  }\n  useIsomorphicLayoutEffect(() => {\n    listeners.add(dispatch);\n    return () => {\n      listeners.delete(dispatch);\n    };\n  }, [listeners]);\n  return state[1];\n}\n\n/**\n * This hook returns the entire context value.\n * Use this instead of React.useContext for consistent behavior.\n *\n * @example\n * import { useContext } from 'use-context-selector';\n *\n * const person = useContext(PersonContext);\n */\nexport function useContext<Value>(context: Context<Value>) {\n  return useContextSelector(context, identity);\n}\n\n/**\n * This hook returns an update function that accepts a thunk function\n *\n * Use this for a function that will change a value in\n * [Concurrent Mode](https://reactjs.org/docs/concurrent-mode-intro.html).\n * Otherwise, there's no need to use this hook.\n *\n * @example\n * import { useContextUpdate } from 'use-context-selector';\n *\n * const update = useContextUpdate();\n * update(() => setState(...));\n */\nexport function useContextUpdate<Value>(context: Context<Value>) {\n  const contextValue = useContextOrig(\n    context as unknown as ContextOrig<ContextValue<Value>>,\n  )[CONTEXT_VALUE];\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!contextValue) {\n      throw new Error('useContextUpdate requires special context');\n    }\n  }\n  const { u: update } = contextValue;\n  return update;\n}\n\n/**\n * This is a Provider component for bridging multiple react roots\n *\n * @example\n * const valueToBridge = useBridgeValue(PersonContext);\n * return (\n *   <Renderer>\n *     <BridgeProvider context={PersonContext} value={valueToBridge}>\n *       {children}\n *     </BridgeProvider>\n *   </Renderer>\n * );\n */\nexport const BridgeProvider: FC<{\n  context: Context<any>;\n  value: any;\n}> = ({ context, value, children }) => {\n  const { [ORIGINAL_PROVIDER]: ProviderOrig } = context as unknown as {\n    [ORIGINAL_PROVIDER]: Provider<unknown>;\n  };\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!ProviderOrig) {\n      throw new Error('BridgeProvider requires special context');\n    }\n  }\n  return createElement(ProviderOrig, { value }, children);\n};\n\n/**\n * This hook return a value for BridgeProvider\n */\nexport const useBridgeValue = (context: Context<any>) => {\n  const bridgeValue = useContextOrig(context as unknown as ContextOrig<ContextValue<unknown>>);\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!bridgeValue[CONTEXT_VALUE]) {\n      throw new Error('useBridgeValue requires special context');\n    }\n  }\n  return bridgeValue as any;\n};\n"],"names":["CONTEXT_VALUE","Symbol","ORIGINAL_PROVIDER","useIsomorphicLayoutEffect","window","test","navigator","userAgent","useEffect","useLayoutEffect","runWithNormalPriority","runWithPriority","thunk","NormalPriority","identity","x","useContextSelector","context","selector","contextValue","useContextOrig","process","env","NODE_ENV","Error","value","v","current","version","n","listeners","l","selected","useReducer","prev","next","Object","is","length","nextSelected","e","state","dispatch","add","children","ProviderOrig","createElement","defaultValue","createContextOrig","Set","u","f","Provider","valueRef","useRef","versionRef","batchedUpdates","forEach","listener","Consumer","bridgeValue"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import {\n  ComponentType,\n  Context as ContextOrig,\n  FC,\n  MutableRefObject,\n  Provider,\n  createElement,\n  createContext as createContextOrig,\n  useContext as useContextOrig,\n  useEffect,\n  useLayoutEffect,\n  useReducer,\n  useRef,\n} from 'react';\nimport {\n  unstable_NormalPriority as NormalPriority,\n  unstable_runWithPriority as runWithPriority,\n} from 'scheduler';\n\nimport { batchedUpdates } from './batchedUpdates';\n\nconst CONTEXT_VALUE = Symbol();\nconst ORIGINAL_PROVIDER = Symbol();\n\nconst isSSR = typeof window === 'undefined'\n  || /ServerSideRendering/.test(window.navigator && window.navigator.userAgent);\n\nconst useIsomorphicLayoutEffect = isSSR ? useEffect : useLayoutEffect;\n\n// for preact that doesn't have runWithPriority\nconst runWithNormalPriority = runWithPriority\n  ? (thunk: () => void) => runWithPriority(NormalPriority, thunk)\n  : (thunk: () => void) => thunk();\n\ntype Version = number;\n\ntype ContextValue<Value> = {\n  [CONTEXT_VALUE]: {\n    /* \"v\"alue     */ v: MutableRefObject<Value>;\n    /* versio\"n\"   */ n: MutableRefObject<Version>;\n    /* \"l\"isteners */ l: Set<(action: readonly [Version] | readonly [Version, Value]) => void>;\n    /* \"u\"pdate    */ u: (thunk: () => void) => void;\n  };\n};\n\nexport interface Context<Value> {\n  Provider: ComponentType<{ value: Value }>;\n  displayName?: string;\n}\n\nconst createProvider = <Value>(\n  ProviderOrig: Provider<ContextValue<Value>>,\n): FC<{ value: Value }> => ({ value, children }) => {\n    const valueRef = useRef(value);\n    const versionRef = useRef(0);\n    const contextValue = useRef<ContextValue<Value>>();\n    if (!contextValue.current) {\n      const listeners = new Set<(action: readonly [Version] | readonly [Version, Value]) => void>();\n      const update = (thunk: () => void) => {\n        batchedUpdates(() => {\n          versionRef.current += 1;\n          listeners.forEach((listener) => listener([versionRef.current]));\n          thunk();\n        });\n      };\n      contextValue.current = {\n        [CONTEXT_VALUE]: {\n          /* \"v\"alue     */ v: valueRef,\n          /* versio\"n\"   */ n: versionRef,\n          /* \"l\"isteners */ l: listeners,\n          /* \"u\"pdate    */ u: update,\n        },\n      };\n    }\n    useIsomorphicLayoutEffect(() => {\n      valueRef.current = value;\n      versionRef.current += 1;\n      runWithNormalPriority(() => {\n        (contextValue.current as ContextValue<Value>)[CONTEXT_VALUE].l.forEach((listener) => {\n          listener([versionRef.current, value]);\n        });\n      });\n    }, [value]);\n    return createElement(ProviderOrig, { value: contextValue.current }, children);\n  };\n\nconst identity = <T>(x: T) => x;\n\n/**\n * This creates a special context for `useContextSelector`.\n *\n * @example\n * import { createContext } from 'use-context-selector';\n *\n * const PersonContext = createContext({ firstName: '', familyName: '' });\n */\nexport function createContext<Value>(defaultValue: Value) {\n  const context = createContextOrig<ContextValue<Value>>({\n    [CONTEXT_VALUE]: {\n      /* \"v\"alue     */ v: { current: defaultValue },\n      /* versio\"n\"   */ n: { current: -1 },\n      /* \"l\"isteners */ l: new Set(),\n      /* \"u\"pdate    */ u: (f) => f(),\n    },\n  });\n  (context as unknown as {\n    [ORIGINAL_PROVIDER]: Provider<ContextValue<Value>>;\n  })[ORIGINAL_PROVIDER] = context.Provider;\n  (context as unknown as Context<Value>).Provider = createProvider(context.Provider);\n  delete (context as any).Consumer; // no support for Consumer\n  return context as unknown as Context<Value>;\n}\n\n/**\n * This hook returns context selected value by selector.\n *\n * It will only accept context created by `createContext`.\n * It will trigger re-render if only the selected value is referentially changed.\n *\n * The selector should return referentially equal result for same input for better performance.\n *\n * @example\n * import { useContextSelector } from 'use-context-selector';\n *\n * const firstName = useContextSelector(PersonContext, state => state.firstName);\n */\nexport function useContextSelector<Value, Selected>(\n  context: Context<Value>,\n  selector: (value: Value) => Selected,\n  equalityFn: <T>(prev: T, next: T) => boolean = Object.is\n) {\n  const contextValue = useContextOrig(\n    context as unknown as ContextOrig<ContextValue<Value>>,\n  )[CONTEXT_VALUE];\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!contextValue) {\n      throw new Error('useContextSelector requires special context');\n    }\n  }\n  const {\n    /* \"v\"alue     */ v: { current: value },\n    /* versio\"n\"   */ n: { current: version },\n    /* \"l\"isteners */ l: listeners,\n  } = contextValue;\n  const selected = selector(value);\n  const [state, dispatch] = useReducer((\n    prev: readonly [Value, Selected],\n    next?: // undefined from render below\n      | readonly [Version] // from useContextUpdate\n      | readonly [Version, Value], // from provider effect\n  ) => {\n    if (!next) {\n      return [value, selected] as const;\n    }\n    if (next[0] === version) {\n      if (equalityFn(prev[1], selected)) {\n        return prev; // bail out\n      }\n      return [value, selected] as const;\n    }\n    try {\n      if (next.length === 2) {\n        if (equalityFn(prev[0], next[1])) {\n          return prev; // do not update\n        }\n        const nextSelected = selector(next[1]);\n        if (equalityFn(prev[1], nextSelected)) {\n          return prev; // do not update\n        }\n        return [next[1], nextSelected] as const;\n      }\n    } catch (e) {\n      // ignored (stale props or some other reason)\n    }\n    return [...prev] as const; // schedule update\n  }, [value, selected] as const);\n  if (!equalityFn(state[1], selected)) {\n    // schedule re-render\n    // this is safe because it's self contained\n    dispatch();\n  }\n  useIsomorphicLayoutEffect(() => {\n    listeners.add(dispatch);\n    return () => {\n      listeners.delete(dispatch);\n    };\n  }, [listeners]);\n  return state[1];\n}\n\n/**\n * This hook returns the entire context value.\n * Use this instead of React.useContext for consistent behavior.\n *\n * @example\n * import { useContext } from 'use-context-selector';\n *\n * const person = useContext(PersonContext);\n */\nexport function useContext<Value>(context: Context<Value>) {\n  return useContextSelector(context, identity);\n}\n\n/**\n * This hook returns an update function that accepts a thunk function\n *\n * Use this for a function that will change a value in\n * [Concurrent Mode](https://reactjs.org/docs/concurrent-mode-intro.html).\n * Otherwise, there's no need to use this hook.\n *\n * @example\n * import { useContextUpdate } from 'use-context-selector';\n *\n * const update = useContextUpdate();\n * update(() => setState(...));\n */\nexport function useContextUpdate<Value>(context: Context<Value>) {\n  const contextValue = useContextOrig(\n    context as unknown as ContextOrig<ContextValue<Value>>,\n  )[CONTEXT_VALUE];\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!contextValue) {\n      throw new Error('useContextUpdate requires special context');\n    }\n  }\n  const { u: update } = contextValue;\n  return update;\n}\n\n/**\n * This is a Provider component for bridging multiple react roots\n *\n * @example\n * const valueToBridge = useBridgeValue(PersonContext);\n * return (\n *   <Renderer>\n *     <BridgeProvider context={PersonContext} value={valueToBridge}>\n *       {children}\n *     </BridgeProvider>\n *   </Renderer>\n * );\n */\nexport const BridgeProvider: FC<{\n  context: Context<any>;\n  value: any;\n}> = ({ context, value, children }) => {\n  const { [ORIGINAL_PROVIDER]: ProviderOrig } = context as unknown as {\n    [ORIGINAL_PROVIDER]: Provider<unknown>;\n  };\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!ProviderOrig) {\n      throw new Error('BridgeProvider requires special context');\n    }\n  }\n  return createElement(ProviderOrig, { value }, children);\n};\n\n/**\n * This hook return a value for BridgeProvider\n */\nexport const useBridgeValue = (context: Context<any>) => {\n  const bridgeValue = useContextOrig(context as unknown as ContextOrig<ContextValue<unknown>>);\n  if (typeof process === 'object' && process.env.NODE_ENV !== 'production') {\n    if (!bridgeValue[CONTEXT_VALUE]) {\n      throw new Error('useBridgeValue requires special context');\n    }\n  }\n  return bridgeValue as any;\n};\n"],"names":["CONTEXT_VALUE","Symbol","ORIGINAL_PROVIDER","useIsomorphicLayoutEffect","window","test","navigator","userAgent","useEffect","useLayoutEffect","runWithNormalPriority","runWithPriority","thunk","NormalPriority","identity","x","useContextSelector","context","selector","equalityFn","Object","is","contextValue","useContextOrig","process","env","NODE_ENV","Error","value","v","current","version","n","listeners","l","selected","useReducer","prev","next","length","nextSelected","e","state","dispatch","add","children","ProviderOrig","createElement","defaultValue","createContextOrig","Set","u","f","Provider","valueRef","useRef","versionRef","batchedUpdates","forEach","listener","Consumer","bridgeValue"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/src/index.d.ts b/dist/src/index.d.ts
index c0b8c36..c629434 100644
--- a/dist/src/index.d.ts
+++ b/dist/src/index.d.ts
@@ -2,6 +2,7 @@ import { ComponentType, FC } from 'react';
 export interface Context<Value> {
     Provider: ComponentType<{
         value: Value;
+        children?: ReactNode;
     }>;
     displayName?: string;
 }
@@ -27,7 +28,7 @@ export declare function createContext<Value>(defaultValue: Value): Context<Value
  *
  * const firstName = useContextSelector(PersonContext, state => state.firstName);
  */
-export declare function useContextSelector<Value, Selected>(context: Context<Value>, selector: (value: Value) => Selected): Selected;
+export declare function useContextSelector<Value, Selected>(context: Context<Value>, selector: (value: Value) => Selected,  equalityFn?: <T>(prev: T, next: T) => boolean): Selected;
 /**
  * This hook returns the entire context value.
  * Use this instead of React.useContext for consistent behavior.
diff --git a/src/index.ts b/src/index.ts
index 37037c0..0fb9f3a 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -127,6 +127,7 @@ export function createContext<Value>(defaultValue: Value) {
 export function useContextSelector<Value, Selected>(
   context: Context<Value>,
   selector: (value: Value) => Selected,
+  equalityFn: <T>(prev: T, next: T) => boolean = Object.is
 ) {
   const contextValue = useContextOrig(
     context as unknown as ContextOrig<ContextValue<Value>>,
@@ -152,18 +153,18 @@ export function useContextSelector<Value, Selected>(
       return [value, selected] as const;
     }
     if (next[0] === version) {
-      if (Object.is(prev[1], selected)) {
+      if (equalityFn(prev[1], selected)) {
         return prev; // bail out
       }
       return [value, selected] as const;
     }
     try {
       if (next.length === 2) {
-        if (Object.is(prev[0], next[1])) {
+        if (equalityFn(prev[0], next[1])) {
           return prev; // do not update
         }
         const nextSelected = selector(next[1]);
-        if (Object.is(prev[1], nextSelected)) {
+        if (equalityFn(prev[1], nextSelected)) {
           return prev; // do not update
         }
         return [next[1], nextSelected] as const;
@@ -173,7 +174,7 @@ export function useContextSelector<Value, Selected>(
     }
     return [...prev] as const; // schedule update
   }, [value, selected] as const);
-  if (!Object.is(state[1], selected)) {
+  if (!equalityFn(state[1], selected)) {
     // schedule re-render
     // this is safe because it's self contained
     dispatch();
