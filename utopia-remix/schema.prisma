generator client {
    provider = "prisma-client-js"
    output   = "./node_modules/@utopia/prisma-client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model GithubAuthentication {
    user_id       String    @unique(map: "unique_github_authentication") @db.VarChar
    access_token  String    @db.VarChar
    refresh_token String?   @db.VarChar
    expires_at    DateTime? @db.Timestamptz(6)

    @@map("github_authentication")
}

model PersistentSession {
    key          String   @id @db.VarChar
    auth_id      Bytes?
    session      Bytes
    created_at   DateTime @db.Timestamptz(6)
    accessed_at  DateTime @db.Timestamptz(6)
    session_json Json?

    @@map("persistent_session")
}

model Project {
    id                   Int                    @id @default(autoincrement())
    proj_id              String                 @unique(map: "unique_project") @db.VarChar
    owner_id             String                 @db.VarChar
    title                String                 @db.VarChar
    created_at           DateTime               @db.Timestamptz(6)
    modified_at          DateTime               @db.Timestamptz(6)
    content              Bytes
    deleted              Boolean?
    ProjectCollaborator  ProjectCollaborator[]
    ProjectAccess        ProjectAccess?
    ProjectAccessRequest ProjectAccessRequest[]
    github_repository    String?

    @@map("project")
}

model ProjectID {
    id      Int    @id @default(autoincrement())
    proj_id String @unique(map: "unique_project_i_d") @db.VarChar

    @@map("project_i_d")
}

model Showcase {
    id      Int    @id @default(autoincrement())
    proj_id String @db.VarChar
    index   BigInt

    @@map("showcase")
}

model UserConfiguration {
    id              Int     @id @default(autoincrement())
    user_id         String  @unique(map: "unique_user_configuration") @db.VarChar
    shortcut_config String? @db.VarChar
    theme           String? @db.VarChar

    @@map("user_configuration")
}

model UserDetails {
    id                   Int                    @id @default(autoincrement())
    user_id              String                 @unique(map: "unique_user_details") @db.VarChar
    email                String?                @db.VarChar
    name                 String?                @db.VarChar
    picture              String?                @db.VarChar
    ProjectCollaborator  ProjectCollaborator[]
    ProjectAccessRequest ProjectAccessRequest[]

    @@map("user_details")
}

model ProjectAccess {
    id Int @id @default(autoincrement())

    Project    Project @relation(fields: [project_id], references: [proj_id])
    project_id String  @unique(map: "unique_project_access") @db.VarChar

    access_level Int      @db.Integer
    modified_at  DateTime @db.Timestamptz(6)

    @@map("project_access")
}

model ProjectCollaborator {
    id Int @id @default(autoincrement())

    Project    Project @relation(fields: [project_id], references: [proj_id])
    project_id String  @db.VarChar

    User    UserDetails @relation(fields: [user_id], references: [user_id])
    user_id String      @db.VarChar

    created_at DateTime @default(now()) @db.Timestamptz(6)

    @@unique([project_id, user_id], name: "unique_project_collaborator_project_id_user_id")
    @@map("project_collaborators")
}

model ProjectAccessRequest {
    id Int @id @default(autoincrement())

    Project    Project @relation(fields: [project_id], references: [proj_id])
    project_id String  @db.VarChar

    User    UserDetails @relation(fields: [user_id], references: [user_id])
    user_id String      @db.VarChar

    status Int @db.Integer

    token String

    created_at DateTime @default(now()) @db.Timestamptz(6)
    updated_at DateTime @default(now()) @db.Timestamptz(6)

    @@unique([project_id, user_id])
    @@unique([project_id, token])
    @@map("project_access_request")
}
