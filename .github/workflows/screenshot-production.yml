name: Screenshot Production
on:
  repository_dispatch:
    types: [trigger-production-screenshot]
  workflow_dispatch:

jobs:
  take-screenshot:
    name: Take Screenshot
    runs-on: ubuntu-latest
    steps:
      - name: Cancel existing runs on this branch
        uses: fauguste/auto-cancellation-running-action@0.1.4
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Cache .pnpm-store
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: Install Puppeteer Libraries
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates fonts-liberation libappindicator3-1 libasound2 libatk-bridge2.0-0 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 lsb-release wget xdg-utils
      - name: Install nix
        uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=https://github.com/NixOS/nixpkgs/archive/6120ac5cd201f6cb593d1b80e861be0342495be9.tar.gz
      - name: Run Puppeteer
        id: run-screenshot-test
        env:
          AWS_S3_BUCKET: ${{secrets.PERFORMANCE_GRAPHS_BUCKET}}
          AWS_ACCESS_KEY_ID: ${{ secrets.PERFORMANCE_GRAPHS_ACCESS_KEY}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PERFORMANCE_GRAPHS_SECRET_KEY }}
          AWS_REGION: ${{ secrets.STAGING_BUNDLE_REGION }}
          BASE_EDITOR_URL: 'https://utopia.app'
          HEADLESS: 'true'
        run: |
          nix-shell --arg includeServerBuildSupport false --arg includeRunLocallySupport false --run "cd puppeteer-tests; pnpm install --unsafe-perm; pnpm run screenshot-test"
      - name: Build Discord Message
        env:
          TEMPLATE: >-
            [
              {
                "title": "Production:",
                "color": 14540253,
                "image": {
                  "url": $screenshot_url
                }
              }
            ]
          SCREENSHOT_URL: ${{ steps.run-screenshot-test.outputs.screenshot }}
        run: |
          echo "DISCORD_EMBEDS=$(jq -nc --arg screenshot_url "$SCREENSHOT_URL" "$TEMPLATE")" >> $GITHUB_ENV
      - name: Send Discord Notification
        uses: Ilshidur/action-discord@0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_BUILD_WEBHOOK }}
          DISCORD_USERNAME: 'Puppeteer'
          DISCORD_AVATAR: https://octodex.github.com/images/puppeteer.png
          MESSAGE: 'Screenshot of latest Production deploy'
        with:
          args: ${{ env.MESSAGE }}
