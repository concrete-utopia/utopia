name: Pull Request
on: [pull_request]

jobs:
  test-editor:
    name: Test Editor PR
    runs-on: ubuntu-latest
    env:
      UTOPIA_SHA: ${{ github.sha }}
    steps:
      - name: Cancel existing runs on this branch
        uses: fauguste/auto-cancellation-running-action@0.1.4
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Cache editor modules
        uses: actions/cache@v2
        with:
          path: editor/node_modules
          key: ${{ runner.os }}-node-editor-PRs-${{ hashFiles('editor/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-editor-PRs-
      - name: Cache editor test result
        id: cache-editor-tests
        uses: actions/cache@v2
        with:
          # For the tests it doesn't really matter what we cache
          path: editor/lib
          key: ${{ runner.os }}-editor-tests-PR-${{ hashFiles('editor/src/**') }}-${{ hashFiles('utopia-api/src/**') }}-${{ hashFiles('editor/package.json') }}-${{ hashFiles('utopia-api/package.json') }}
      - name: Cache utopia-api modules
        uses: actions/cache@v2
        with:
          path: utopia-api/node_modules
          key: ${{ runner.os }}-node-utopia-api-PRs-${{ hashFiles('utopia-api/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-utopia-api-PRs-
      - name: Cache utopia-vscode-common modules
        uses: actions/cache@v2
        with:
          path: utopia-vscode-common/node_modules
          key: ${{ runner.os }}-utopia-vscode-common-PRs-node-modules-${{ hashFiles('utopia-vscode-common/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-utopia-vscode-common-PRs-node-modules-
      - name: Cache website modules
        uses: actions/cache@v2
        with:
          path: website-next/node_modules
          key: ${{ runner.os }}-node-website-PRs-${{ hashFiles('website-next/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-website-PRs-
      - name: Install nix
        uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=channel:nixos-20.09
      - name: Run the tests
        if: steps.cache-editor-tests.outputs.cache-hit != 'true'
        run: nix-shell --arg includeServerBuildSupport false --arg includeRunLocallySupport false --run check-editor-all-ci

  test-editor-move-template-only:
    name: Test Editor Move Template Only PR
    runs-on: ubuntu-latest
    env:
      UTOPIA_SHA: ${{ github.sha }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Cache editor modules
        uses: actions/cache@v2
        with:
          path: editor/node_modules
          key: ${{ runner.os }}-node-editor-PRs-${{ hashFiles('editor/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-editor-PRs-
      - name: Cache editor test result
        id: cache-editor-tests-move-template-only
        uses: actions/cache@v2
        with:
          # For the tests it doesn't really matter what we cache
          path: editor/lib
          key: ${{ runner.os }}-editor-tests-move-template-only-PR-${{ hashFiles('editor/src/**') }}-${{ hashFiles('utopia-api/src/**') }}-${{ hashFiles('editor/package.json') }}-${{ hashFiles('utopia-api/package.json') }}
      - name: Cache utopia-api modules
        uses: actions/cache@v2
        with:
          path: utopia-api/node_modules
          key: ${{ runner.os }}-node-utopia-api-PRs-${{ hashFiles('utopia-api/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-utopia-api-PRs-
      - name: Cache utopia-vscode-common modules
        uses: actions/cache@v2
        with:
          path: utopia-vscode-common/node_modules
          key: ${{ runner.os }}-utopia-vscode-common-PRs-node-modules-${{ hashFiles('utopia-vscode-common/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-utopia-vscode-common-PRs-node-modules-
      - name: Install nix
        uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=channel:nixos-20.09
      - name: Run the tests
        if: steps.cache-editor-tests-move-template-only.outputs.cache-hit != 'true'
        run: nix-shell --arg includeServerBuildSupport false --arg includeRunLocallySupport false --run test-editor-move-template-only-ci

  deploy-staging:
    name: Deploy Staging Editor
    runs-on: ubuntu-latest
    env:
      UTOPIA_SHA: ${{ github.sha }}
      AUTH0_CLIENT_ID: KB7euFO46rVYeOaWmrEdktdhAFxEO266
      AUTH0_ENDPOINT: enter.utopia.app
      AUTH0_REDIRECT_URI: https://utopia.pizza/authenticate
    steps:
      # Gets the branch that this PR is targeting and replaces forward slashes in the name with hyphens.
      # So that later steps can produce a bundle incorporating that into the name and upload it.
      - name: Extract branch name
        shell: bash
        run: |
          FIXED_REF="${GITHUB_HEAD_REF////-}"
          echo "##[set-output name=branch;]$FIXED_REF"
        id: extract_branch
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Cache editor modules
        uses: actions/cache@v2
        with:
          path: editor/node_modules
          key: ${{ runner.os }}-node-editor-PRs-${{ hashFiles('editor/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-editor-PRs-
      - name: Cache utopia-api modules
        uses: actions/cache@v2
        with:
          path: utopia-api/node_modules
          key: ${{ runner.os }}-node-utopia-api-PRs-${{ hashFiles('utopia-api/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-utopia-api-PRs-
      - name: Cache utopia-vscode-common modules
        uses: actions/cache@v2
        with:
          path: utopia-vscode-common/node_modules
          key: ${{ runner.os }}-utopia-vscode-common-PRs-node-modules-${{ hashFiles('utopia-vscode-common/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-utopia-vscode-common-PRs-node-modules-
      - name: Install nix
        uses: cachix/install-nix-action@v12
        with:
          nix_path: nixpkgs=channel:nixos-20.09
      - name: Build Editor
        if: steps.cache-editor-tests.outputs.cache-hit != 'true'
        run: |
          nix-shell --arg includeServerBuildSupport false --arg includeRunLocallySupport false --run build-editor-staging-ci
      - name: Send webpack stats to RelativeCI
        uses: relative-ci/agent-action@v1.1.0
        with:
          webpackStatsFile: editor/lib/staging-stats.json
          key: ${{ secrets.RELATIVE_CI_KEY }}
          debug: false
      - name: Create Editor Bundle
        working-directory: editor/lib/
        run: |
          tar -czvf ../${{ steps.extract_branch.outputs.branch }}.tar.gz *
      - name: Upload Editor Bundle
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          args: --acl private --exclude '*' --include 'editor/${{ steps.extract_branch.outputs.branch }}.tar.gz'
        env:
          AWS_S3_BUCKET: ${{ secrets.STAGING_BUNDLE_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.STAGING_BUNDLE_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.STAGING_BUNDLE_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.STAGING_BUNDLE_REGION }}
      - name: Flush Staging Editor Bundle
        shell: bash
        run: |
          curl -s -o /dev/null -w "FLUSH STAGING HTTP RESPONSE CODE: %{http_code}" -X DELETE 'https://${{ secrets.STAGING_SERVER }}/internal/branch?branch_name=${{ steps.extract_branch.outputs.branch }}'
      - name: Run Performance Test
        id: run-performance-test
        env:
          BRANCH_NAME: ${{ steps.extract_branch.outputs.branch }}
          HEADLESS: 'true'
          AWS_S3_BUCKET: ${{secrets.PERFORMANCE_GRAPHS_BUCKET}}
          AWS_ACCESS_KEY_ID: ${{ secrets.PERFORMANCE_GRAPHS_ACCESS_KEY}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PERFORMANCE_GRAPHS_SECRET_KEY }}
          AWS_REGION: ${{ secrets.STAGING_BUNDLE_REGION }}
          PERFORMANCE_GRAPHS_PLOTLY_USERNAME: ${{ secrets.PERFORMANCE_GRAPHS_PLOTLY_USERNAME}}
          PERFORMANCE_GRAPHS_PLOTLY_API_KEY: ${{secrets.PERFORMANCE_GRAPHS_PLOTLY_API_KEY}}
        run: |
          nix-shell --arg includeServerBuildSupport false --arg includeRunLocallySupport false --run "cd performance-test; npm install --unsafe-perm; npm start"
      - name: Create comment
        uses: peter-evans/create-or-update-comment@v1
        if: ${{ success() || failure() }}
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            [Link to test editor](https://${{ secrets.STAGING_SERVER }}/p/?branch_name=${{ steps.extract_branch.outputs.branch }})
            ${{ steps.run-performance-test.outputs.perf-result }}
      - name: Build Discord Message
        env:
          TEMPLATE: >-
            [
              {
                "title": $title,
                "url": $html_url,
                "color": 2369839,
                "description": $description,
                "fields": [
                  {
                    "name": "This PR:",
                    "value": $staging_message
                  },
                  {
                    "name": "Current Staging:",
                    "value": $master_message
                  }
                ],
                "footer": {
                  "text": $repo_full_name
                }
              },
              {
                "title": "This PR:",
                "color": 2369839,
                "image": {
                  "url": $staging_chart
                }
              },
              {
                "title": "Current Staging:",
                "color": 14540253,
                "image": {
                  "url": $master_chart
                }
              }
            ]
          TITLE: 'Performance Results for #${{ github.event.pull_request.number }} ${{ github.event.pull_request.title }}'
          HTML_URL: ${{ github.event.pull_request.html_url }}
          DESCRIPTION: 'Link to test editor: https://${{ secrets.STAGING_SERVER }}/p/?branch_name=${{ steps.extract_branch.outputs.branch }}'
          REPO_FULL_NAME: ${{ github.event.repository.full_name }}
          STAGING_MESSAGE: ${{ steps.run-performance-test.outputs.perf-message-staging }}
          STAGING_CHART: ${{ steps.run-performance-test.outputs.perf-chart-staging }}
          MASTER_MESSAGE: ${{ steps.run-performance-test.outputs.perf-message-master }}
          MASTER_CHART: ${{ steps.run-performance-test.outputs.perf-chart-master }}
        run: |
          echo "DISCORD_EMBEDS=$(jq -nc --arg title "$TITLE" --arg html_url "$HTML_URL" --arg description "$DESCRIPTION" --arg repo_full_name "$REPO_FULL_NAME" --arg staging_message "$STAGING_MESSAGE" --arg master_message "$MASTER_MESSAGE" --arg staging_chart "$STAGING_CHART" --arg master_chart "$MASTER_CHART" "$TEMPLATE")" >> $GITHUB_ENV
      - name: Send Discord Notification
        uses: Ilshidur/action-discord@0.3.2
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_PRS_WEBHOOK }}
          DISCORD_USERNAME: 'Puppeteer'
          DISCORD_AVATAR: https://octodex.github.com/images/puppeteer.png
          MESSAGE: 'Performance results for #${{ github.event.pull_request.number }}'
        with:
          args: ${{ env.MESSAGE }}
